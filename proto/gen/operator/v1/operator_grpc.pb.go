// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: operator/v1/operator.proto

package operatorv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OperatorService_Hello_FullMethodName                = "/operator.v1.OperatorService/Hello"
	OperatorService_SubscribeListeners_FullMethodName   = "/operator.v1.OperatorService/SubscribeListeners"
	OperatorService_SubscribeAnts_FullMethodName        = "/operator.v1.OperatorService/SubscribeAnts"
	OperatorService_SubscribeOperators_FullMethodName   = "/operator.v1.OperatorService/SubscribeOperators"
	OperatorService_SubscribeChat_FullMethodName        = "/operator.v1.OperatorService/SubscribeChat"
	OperatorService_SubscribeCredentials_FullMethodName = "/operator.v1.OperatorService/SubscribeCredentials"
	OperatorService_SubscribeTasks_FullMethodName       = "/operator.v1.OperatorService/SubscribeTasks"
	OperatorService_SetListenerColor_FullMethodName     = "/operator.v1.OperatorService/SetListenerColor"
	OperatorService_SetListenersColor_FullMethodName    = "/operator.v1.OperatorService/SetListenersColor"
	OperatorService_SetListenerNote_FullMethodName      = "/operator.v1.OperatorService/SetListenerNote"
	OperatorService_SetListenersNote_FullMethodName     = "/operator.v1.OperatorService/SetListenersNote"
	OperatorService_SetAntColor_FullMethodName          = "/operator.v1.OperatorService/SetAntColor"
	OperatorService_SetAntsColor_FullMethodName         = "/operator.v1.OperatorService/SetAntsColor"
	OperatorService_SetAntNote_FullMethodName           = "/operator.v1.OperatorService/SetAntNote"
	OperatorService_SetAntsNote_FullMethodName          = "/operator.v1.OperatorService/SetAntsNote"
	OperatorService_SetOperatorColor_FullMethodName     = "/operator.v1.OperatorService/SetOperatorColor"
	OperatorService_SetOperatorsColor_FullMethodName    = "/operator.v1.OperatorService/SetOperatorsColor"
	OperatorService_NewChatMessage_FullMethodName       = "/operator.v1.OperatorService/NewChatMessage"
	OperatorService_NewCredential_FullMethodName        = "/operator.v1.OperatorService/NewCredential"
	OperatorService_SetCredentialColor_FullMethodName   = "/operator.v1.OperatorService/SetCredentialColor"
	OperatorService_SetCredentialsColor_FullMethodName  = "/operator.v1.OperatorService/SetCredentialsColor"
	OperatorService_SetCredentialNote_FullMethodName    = "/operator.v1.OperatorService/SetCredentialNote"
	OperatorService_SetCredentialsNote_FullMethodName   = "/operator.v1.OperatorService/SetCredentialsNote"
	OperatorService_NewCommand_FullMethodName           = "/operator.v1.OperatorService/NewCommand"
	OperatorService_CancelTasks_FullMethodName          = "/operator.v1.OperatorService/CancelTasks"
	OperatorService_GetTaskOutput_FullMethodName        = "/operator.v1.OperatorService/GetTaskOutput"
)

// OperatorServiceClient is the client API for OperatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperatorServiceClient interface {
	// Initial handshake to provide operator's cookie. If this stream
	// will be interrupted by operator - all subscriptions on another
	// streams will be interrupted. If operator has already subscribed on
	// this stream - new connection with same username will be dropped.
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HelloResponse], error)
	// Subscription for gathering listeners information with runtime updates
	SubscribeListeners(ctx context.Context, in *SubscribeListenersRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeListenersResponse], error)
	// Subscription for gathering ants information with runtime updates
	SubscribeAnts(ctx context.Context, in *SubscribeAntsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeAntsResponse], error)
	// Subscription for gathering operators information with runtime updates
	SubscribeOperators(ctx context.Context, in *SubscribeOperatorsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeOperatorsResponse], error)
	// Subscription for gathering chat's messages information with runtime updates
	SubscribeChat(ctx context.Context, in *SubscribeChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeChatResponse], error)
	// Subscription for gathering credentials information with runtime updates
	SubscribeCredentials(ctx context.Context, in *SubscribeCredentialsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeCredentialsResponse], error)
	// Subscription for gathering ans supplying tasks information with runtime updates
	SubscribeTasks(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SubscribeTasksRequest, SubscribeTasksResponse], error)
	// Update color on listener
	SetListenerColor(ctx context.Context, in *SetListenerColorRequest, opts ...grpc.CallOption) (*SetListenerColorResponse, error)
	// Update color on list of listeners
	SetListenersColor(ctx context.Context, in *SetListenersColorRequest, opts ...grpc.CallOption) (*SetListenersColorResponse, error)
	// Update note on listener
	SetListenerNote(ctx context.Context, in *SetListenerNoteRequest, opts ...grpc.CallOption) (*SetListenerNoteResponse, error)
	// Update note on list of listeners
	SetListenersNote(ctx context.Context, in *SetListenersNoteRequest, opts ...grpc.CallOption) (*SetListenersNoteResponse, error)
	// Update color on ant
	SetAntColor(ctx context.Context, in *SetAntColorRequest, opts ...grpc.CallOption) (*SetAntColorResponse, error)
	// Update color on list of ants
	SetAntsColor(ctx context.Context, in *SetAntsColorRequest, opts ...grpc.CallOption) (*SetAntsColorResponse, error)
	// Update note on ant
	SetAntNote(ctx context.Context, in *SetAntNoteRequest, opts ...grpc.CallOption) (*SetAntNoteResponse, error)
	// Update note on list of ants
	SetAntsNote(ctx context.Context, in *SetAntsNoteRequest, opts ...grpc.CallOption) (*SetAntsNoteResponse, error)
	// Update color on operator
	SetOperatorColor(ctx context.Context, in *SetOperatorColorRequest, opts ...grpc.CallOption) (*SetOperatorColorResponse, error)
	// Update color on list of operators
	SetOperatorsColor(ctx context.Context, in *SetOperatorsColorRequest, opts ...grpc.CallOption) (*SetOperatorsColorResponse, error)
	// Create new message in chat
	NewChatMessage(ctx context.Context, in *NewChatMessageRequest, opts ...grpc.CallOption) (*NewChatMessageResponse, error)
	// Create new credential
	NewCredential(ctx context.Context, in *NewCredentialRequest, opts ...grpc.CallOption) (*NewCredentialResponse, error)
	// Update color on credential
	SetCredentialColor(ctx context.Context, in *SetCredentialColorRequest, opts ...grpc.CallOption) (*SetCredentialColorResponse, error)
	// Update color on list of credentials
	SetCredentialsColor(ctx context.Context, in *SetCredentialsColorRequest, opts ...grpc.CallOption) (*SetCredentialsColorResponse, error)
	// Update note on credential
	SetCredentialNote(ctx context.Context, in *SetCredentialNoteRequest, opts ...grpc.CallOption) (*SetCredentialNoteResponse, error)
	// Update note on list of credentials
	SetCredentialsNote(ctx context.Context, in *SetCredentialsNoteRequest, opts ...grpc.CallOption) (*SetCredentialsNoteResponse, error)
	// Create new command for merging tasks and messages in
	NewCommand(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NewCommandRequest, NewCommandResponse], error)
	// Cancel all tasks in queue created by operator and located in status "NEW"
	CancelTasks(ctx context.Context, in *CancelTasksRequest, opts ...grpc.CallOption) (*CancelTasksResponse, error)
	// Get direct task's output. Used to get task's big output
	GetTaskOutput(ctx context.Context, in *GetTaskOutputRequest, opts ...grpc.CallOption) (*GetTaskOutputResponse, error)
}

type operatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOperatorServiceClient(cc grpc.ClientConnInterface) OperatorServiceClient {
	return &operatorServiceClient{cc}
}

func (c *operatorServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HelloResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OperatorService_ServiceDesc.Streams[0], OperatorService_Hello_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HelloRequest, HelloResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_HelloClient = grpc.ServerStreamingClient[HelloResponse]

func (c *operatorServiceClient) SubscribeListeners(ctx context.Context, in *SubscribeListenersRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeListenersResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OperatorService_ServiceDesc.Streams[1], OperatorService_SubscribeListeners_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeListenersRequest, SubscribeListenersResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_SubscribeListenersClient = grpc.ServerStreamingClient[SubscribeListenersResponse]

func (c *operatorServiceClient) SubscribeAnts(ctx context.Context, in *SubscribeAntsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeAntsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OperatorService_ServiceDesc.Streams[2], OperatorService_SubscribeAnts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeAntsRequest, SubscribeAntsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_SubscribeAntsClient = grpc.ServerStreamingClient[SubscribeAntsResponse]

func (c *operatorServiceClient) SubscribeOperators(ctx context.Context, in *SubscribeOperatorsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeOperatorsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OperatorService_ServiceDesc.Streams[3], OperatorService_SubscribeOperators_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeOperatorsRequest, SubscribeOperatorsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_SubscribeOperatorsClient = grpc.ServerStreamingClient[SubscribeOperatorsResponse]

func (c *operatorServiceClient) SubscribeChat(ctx context.Context, in *SubscribeChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeChatResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OperatorService_ServiceDesc.Streams[4], OperatorService_SubscribeChat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeChatRequest, SubscribeChatResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_SubscribeChatClient = grpc.ServerStreamingClient[SubscribeChatResponse]

func (c *operatorServiceClient) SubscribeCredentials(ctx context.Context, in *SubscribeCredentialsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeCredentialsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OperatorService_ServiceDesc.Streams[5], OperatorService_SubscribeCredentials_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeCredentialsRequest, SubscribeCredentialsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_SubscribeCredentialsClient = grpc.ServerStreamingClient[SubscribeCredentialsResponse]

func (c *operatorServiceClient) SubscribeTasks(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SubscribeTasksRequest, SubscribeTasksResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OperatorService_ServiceDesc.Streams[6], OperatorService_SubscribeTasks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeTasksRequest, SubscribeTasksResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_SubscribeTasksClient = grpc.BidiStreamingClient[SubscribeTasksRequest, SubscribeTasksResponse]

func (c *operatorServiceClient) SetListenerColor(ctx context.Context, in *SetListenerColorRequest, opts ...grpc.CallOption) (*SetListenerColorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetListenerColorResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetListenerColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetListenersColor(ctx context.Context, in *SetListenersColorRequest, opts ...grpc.CallOption) (*SetListenersColorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetListenersColorResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetListenersColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetListenerNote(ctx context.Context, in *SetListenerNoteRequest, opts ...grpc.CallOption) (*SetListenerNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetListenerNoteResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetListenerNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetListenersNote(ctx context.Context, in *SetListenersNoteRequest, opts ...grpc.CallOption) (*SetListenersNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetListenersNoteResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetListenersNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetAntColor(ctx context.Context, in *SetAntColorRequest, opts ...grpc.CallOption) (*SetAntColorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAntColorResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetAntColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetAntsColor(ctx context.Context, in *SetAntsColorRequest, opts ...grpc.CallOption) (*SetAntsColorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAntsColorResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetAntsColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetAntNote(ctx context.Context, in *SetAntNoteRequest, opts ...grpc.CallOption) (*SetAntNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAntNoteResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetAntNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetAntsNote(ctx context.Context, in *SetAntsNoteRequest, opts ...grpc.CallOption) (*SetAntsNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAntsNoteResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetAntsNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetOperatorColor(ctx context.Context, in *SetOperatorColorRequest, opts ...grpc.CallOption) (*SetOperatorColorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetOperatorColorResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetOperatorColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetOperatorsColor(ctx context.Context, in *SetOperatorsColorRequest, opts ...grpc.CallOption) (*SetOperatorsColorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetOperatorsColorResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetOperatorsColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) NewChatMessage(ctx context.Context, in *NewChatMessageRequest, opts ...grpc.CallOption) (*NewChatMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewChatMessageResponse)
	err := c.cc.Invoke(ctx, OperatorService_NewChatMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) NewCredential(ctx context.Context, in *NewCredentialRequest, opts ...grpc.CallOption) (*NewCredentialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewCredentialResponse)
	err := c.cc.Invoke(ctx, OperatorService_NewCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetCredentialColor(ctx context.Context, in *SetCredentialColorRequest, opts ...grpc.CallOption) (*SetCredentialColorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCredentialColorResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetCredentialColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetCredentialsColor(ctx context.Context, in *SetCredentialsColorRequest, opts ...grpc.CallOption) (*SetCredentialsColorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCredentialsColorResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetCredentialsColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetCredentialNote(ctx context.Context, in *SetCredentialNoteRequest, opts ...grpc.CallOption) (*SetCredentialNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCredentialNoteResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetCredentialNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetCredentialsNote(ctx context.Context, in *SetCredentialsNoteRequest, opts ...grpc.CallOption) (*SetCredentialsNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCredentialsNoteResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetCredentialsNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) NewCommand(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NewCommandRequest, NewCommandResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OperatorService_ServiceDesc.Streams[7], OperatorService_NewCommand_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NewCommandRequest, NewCommandResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_NewCommandClient = grpc.ClientStreamingClient[NewCommandRequest, NewCommandResponse]

func (c *operatorServiceClient) CancelTasks(ctx context.Context, in *CancelTasksRequest, opts ...grpc.CallOption) (*CancelTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelTasksResponse)
	err := c.cc.Invoke(ctx, OperatorService_CancelTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) GetTaskOutput(ctx context.Context, in *GetTaskOutputRequest, opts ...grpc.CallOption) (*GetTaskOutputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskOutputResponse)
	err := c.cc.Invoke(ctx, OperatorService_GetTaskOutput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperatorServiceServer is the server API for OperatorService service.
// All implementations must embed UnimplementedOperatorServiceServer
// for forward compatibility.
type OperatorServiceServer interface {
	// Initial handshake to provide operator's cookie. If this stream
	// will be interrupted by operator - all subscriptions on another
	// streams will be interrupted. If operator has already subscribed on
	// this stream - new connection with same username will be dropped.
	Hello(*HelloRequest, grpc.ServerStreamingServer[HelloResponse]) error
	// Subscription for gathering listeners information with runtime updates
	SubscribeListeners(*SubscribeListenersRequest, grpc.ServerStreamingServer[SubscribeListenersResponse]) error
	// Subscription for gathering ants information with runtime updates
	SubscribeAnts(*SubscribeAntsRequest, grpc.ServerStreamingServer[SubscribeAntsResponse]) error
	// Subscription for gathering operators information with runtime updates
	SubscribeOperators(*SubscribeOperatorsRequest, grpc.ServerStreamingServer[SubscribeOperatorsResponse]) error
	// Subscription for gathering chat's messages information with runtime updates
	SubscribeChat(*SubscribeChatRequest, grpc.ServerStreamingServer[SubscribeChatResponse]) error
	// Subscription for gathering credentials information with runtime updates
	SubscribeCredentials(*SubscribeCredentialsRequest, grpc.ServerStreamingServer[SubscribeCredentialsResponse]) error
	// Subscription for gathering ans supplying tasks information with runtime updates
	SubscribeTasks(grpc.BidiStreamingServer[SubscribeTasksRequest, SubscribeTasksResponse]) error
	// Update color on listener
	SetListenerColor(context.Context, *SetListenerColorRequest) (*SetListenerColorResponse, error)
	// Update color on list of listeners
	SetListenersColor(context.Context, *SetListenersColorRequest) (*SetListenersColorResponse, error)
	// Update note on listener
	SetListenerNote(context.Context, *SetListenerNoteRequest) (*SetListenerNoteResponse, error)
	// Update note on list of listeners
	SetListenersNote(context.Context, *SetListenersNoteRequest) (*SetListenersNoteResponse, error)
	// Update color on ant
	SetAntColor(context.Context, *SetAntColorRequest) (*SetAntColorResponse, error)
	// Update color on list of ants
	SetAntsColor(context.Context, *SetAntsColorRequest) (*SetAntsColorResponse, error)
	// Update note on ant
	SetAntNote(context.Context, *SetAntNoteRequest) (*SetAntNoteResponse, error)
	// Update note on list of ants
	SetAntsNote(context.Context, *SetAntsNoteRequest) (*SetAntsNoteResponse, error)
	// Update color on operator
	SetOperatorColor(context.Context, *SetOperatorColorRequest) (*SetOperatorColorResponse, error)
	// Update color on list of operators
	SetOperatorsColor(context.Context, *SetOperatorsColorRequest) (*SetOperatorsColorResponse, error)
	// Create new message in chat
	NewChatMessage(context.Context, *NewChatMessageRequest) (*NewChatMessageResponse, error)
	// Create new credential
	NewCredential(context.Context, *NewCredentialRequest) (*NewCredentialResponse, error)
	// Update color on credential
	SetCredentialColor(context.Context, *SetCredentialColorRequest) (*SetCredentialColorResponse, error)
	// Update color on list of credentials
	SetCredentialsColor(context.Context, *SetCredentialsColorRequest) (*SetCredentialsColorResponse, error)
	// Update note on credential
	SetCredentialNote(context.Context, *SetCredentialNoteRequest) (*SetCredentialNoteResponse, error)
	// Update note on list of credentials
	SetCredentialsNote(context.Context, *SetCredentialsNoteRequest) (*SetCredentialsNoteResponse, error)
	// Create new command for merging tasks and messages in
	NewCommand(grpc.ClientStreamingServer[NewCommandRequest, NewCommandResponse]) error
	// Cancel all tasks in queue created by operator and located in status "NEW"
	CancelTasks(context.Context, *CancelTasksRequest) (*CancelTasksResponse, error)
	// Get direct task's output. Used to get task's big output
	GetTaskOutput(context.Context, *GetTaskOutputRequest) (*GetTaskOutputResponse, error)
	mustEmbedUnimplementedOperatorServiceServer()
}

// UnimplementedOperatorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOperatorServiceServer struct{}

func (UnimplementedOperatorServiceServer) Hello(*HelloRequest, grpc.ServerStreamingServer[HelloResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedOperatorServiceServer) SubscribeListeners(*SubscribeListenersRequest, grpc.ServerStreamingServer[SubscribeListenersResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeListeners not implemented")
}
func (UnimplementedOperatorServiceServer) SubscribeAnts(*SubscribeAntsRequest, grpc.ServerStreamingServer[SubscribeAntsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeAnts not implemented")
}
func (UnimplementedOperatorServiceServer) SubscribeOperators(*SubscribeOperatorsRequest, grpc.ServerStreamingServer[SubscribeOperatorsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeOperators not implemented")
}
func (UnimplementedOperatorServiceServer) SubscribeChat(*SubscribeChatRequest, grpc.ServerStreamingServer[SubscribeChatResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeChat not implemented")
}
func (UnimplementedOperatorServiceServer) SubscribeCredentials(*SubscribeCredentialsRequest, grpc.ServerStreamingServer[SubscribeCredentialsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCredentials not implemented")
}
func (UnimplementedOperatorServiceServer) SubscribeTasks(grpc.BidiStreamingServer[SubscribeTasksRequest, SubscribeTasksResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTasks not implemented")
}
func (UnimplementedOperatorServiceServer) SetListenerColor(context.Context, *SetListenerColorRequest) (*SetListenerColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetListenerColor not implemented")
}
func (UnimplementedOperatorServiceServer) SetListenersColor(context.Context, *SetListenersColorRequest) (*SetListenersColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetListenersColor not implemented")
}
func (UnimplementedOperatorServiceServer) SetListenerNote(context.Context, *SetListenerNoteRequest) (*SetListenerNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetListenerNote not implemented")
}
func (UnimplementedOperatorServiceServer) SetListenersNote(context.Context, *SetListenersNoteRequest) (*SetListenersNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetListenersNote not implemented")
}
func (UnimplementedOperatorServiceServer) SetAntColor(context.Context, *SetAntColorRequest) (*SetAntColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAntColor not implemented")
}
func (UnimplementedOperatorServiceServer) SetAntsColor(context.Context, *SetAntsColorRequest) (*SetAntsColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAntsColor not implemented")
}
func (UnimplementedOperatorServiceServer) SetAntNote(context.Context, *SetAntNoteRequest) (*SetAntNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAntNote not implemented")
}
func (UnimplementedOperatorServiceServer) SetAntsNote(context.Context, *SetAntsNoteRequest) (*SetAntsNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAntsNote not implemented")
}
func (UnimplementedOperatorServiceServer) SetOperatorColor(context.Context, *SetOperatorColorRequest) (*SetOperatorColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOperatorColor not implemented")
}
func (UnimplementedOperatorServiceServer) SetOperatorsColor(context.Context, *SetOperatorsColorRequest) (*SetOperatorsColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOperatorsColor not implemented")
}
func (UnimplementedOperatorServiceServer) NewChatMessage(context.Context, *NewChatMessageRequest) (*NewChatMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewChatMessage not implemented")
}
func (UnimplementedOperatorServiceServer) NewCredential(context.Context, *NewCredentialRequest) (*NewCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewCredential not implemented")
}
func (UnimplementedOperatorServiceServer) SetCredentialColor(context.Context, *SetCredentialColorRequest) (*SetCredentialColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCredentialColor not implemented")
}
func (UnimplementedOperatorServiceServer) SetCredentialsColor(context.Context, *SetCredentialsColorRequest) (*SetCredentialsColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCredentialsColor not implemented")
}
func (UnimplementedOperatorServiceServer) SetCredentialNote(context.Context, *SetCredentialNoteRequest) (*SetCredentialNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCredentialNote not implemented")
}
func (UnimplementedOperatorServiceServer) SetCredentialsNote(context.Context, *SetCredentialsNoteRequest) (*SetCredentialsNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCredentialsNote not implemented")
}
func (UnimplementedOperatorServiceServer) NewCommand(grpc.ClientStreamingServer[NewCommandRequest, NewCommandResponse]) error {
	return status.Errorf(codes.Unimplemented, "method NewCommand not implemented")
}
func (UnimplementedOperatorServiceServer) CancelTasks(context.Context, *CancelTasksRequest) (*CancelTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTasks not implemented")
}
func (UnimplementedOperatorServiceServer) GetTaskOutput(context.Context, *GetTaskOutputRequest) (*GetTaskOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskOutput not implemented")
}
func (UnimplementedOperatorServiceServer) mustEmbedUnimplementedOperatorServiceServer() {}
func (UnimplementedOperatorServiceServer) testEmbeddedByValue()                         {}

// UnsafeOperatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperatorServiceServer will
// result in compilation errors.
type UnsafeOperatorServiceServer interface {
	mustEmbedUnimplementedOperatorServiceServer()
}

func RegisterOperatorServiceServer(s grpc.ServiceRegistrar, srv OperatorServiceServer) {
	// If the following call pancis, it indicates UnimplementedOperatorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OperatorService_ServiceDesc, srv)
}

func _OperatorService_Hello_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperatorServiceServer).Hello(m, &grpc.GenericServerStream[HelloRequest, HelloResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_HelloServer = grpc.ServerStreamingServer[HelloResponse]

func _OperatorService_SubscribeListeners_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeListenersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperatorServiceServer).SubscribeListeners(m, &grpc.GenericServerStream[SubscribeListenersRequest, SubscribeListenersResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_SubscribeListenersServer = grpc.ServerStreamingServer[SubscribeListenersResponse]

func _OperatorService_SubscribeAnts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeAntsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperatorServiceServer).SubscribeAnts(m, &grpc.GenericServerStream[SubscribeAntsRequest, SubscribeAntsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_SubscribeAntsServer = grpc.ServerStreamingServer[SubscribeAntsResponse]

func _OperatorService_SubscribeOperators_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeOperatorsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperatorServiceServer).SubscribeOperators(m, &grpc.GenericServerStream[SubscribeOperatorsRequest, SubscribeOperatorsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_SubscribeOperatorsServer = grpc.ServerStreamingServer[SubscribeOperatorsResponse]

func _OperatorService_SubscribeChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperatorServiceServer).SubscribeChat(m, &grpc.GenericServerStream[SubscribeChatRequest, SubscribeChatResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_SubscribeChatServer = grpc.ServerStreamingServer[SubscribeChatResponse]

func _OperatorService_SubscribeCredentials_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCredentialsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperatorServiceServer).SubscribeCredentials(m, &grpc.GenericServerStream[SubscribeCredentialsRequest, SubscribeCredentialsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_SubscribeCredentialsServer = grpc.ServerStreamingServer[SubscribeCredentialsResponse]

func _OperatorService_SubscribeTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OperatorServiceServer).SubscribeTasks(&grpc.GenericServerStream[SubscribeTasksRequest, SubscribeTasksResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_SubscribeTasksServer = grpc.BidiStreamingServer[SubscribeTasksRequest, SubscribeTasksResponse]

func _OperatorService_SetListenerColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetListenerColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetListenerColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetListenerColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetListenerColor(ctx, req.(*SetListenerColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetListenersColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetListenersColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetListenersColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetListenersColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetListenersColor(ctx, req.(*SetListenersColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetListenerNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetListenerNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetListenerNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetListenerNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetListenerNote(ctx, req.(*SetListenerNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetListenersNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetListenersNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetListenersNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetListenersNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetListenersNote(ctx, req.(*SetListenersNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetAntColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAntColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetAntColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetAntColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetAntColor(ctx, req.(*SetAntColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetAntsColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAntsColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetAntsColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetAntsColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetAntsColor(ctx, req.(*SetAntsColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetAntNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAntNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetAntNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetAntNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetAntNote(ctx, req.(*SetAntNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetAntsNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAntsNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetAntsNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetAntsNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetAntsNote(ctx, req.(*SetAntsNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetOperatorColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOperatorColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetOperatorColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetOperatorColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetOperatorColor(ctx, req.(*SetOperatorColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetOperatorsColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOperatorsColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetOperatorsColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetOperatorsColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetOperatorsColor(ctx, req.(*SetOperatorsColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_NewChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).NewChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_NewChatMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).NewChatMessage(ctx, req.(*NewChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_NewCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).NewCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_NewCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).NewCredential(ctx, req.(*NewCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetCredentialColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCredentialColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetCredentialColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetCredentialColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetCredentialColor(ctx, req.(*SetCredentialColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetCredentialsColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCredentialsColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetCredentialsColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetCredentialsColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetCredentialsColor(ctx, req.(*SetCredentialsColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetCredentialNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCredentialNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetCredentialNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetCredentialNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetCredentialNote(ctx, req.(*SetCredentialNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetCredentialsNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCredentialsNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetCredentialsNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetCredentialsNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetCredentialsNote(ctx, req.(*SetCredentialsNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_NewCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OperatorServiceServer).NewCommand(&grpc.GenericServerStream[NewCommandRequest, NewCommandResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_NewCommandServer = grpc.ClientStreamingServer[NewCommandRequest, NewCommandResponse]

func _OperatorService_CancelTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).CancelTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_CancelTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).CancelTasks(ctx, req.(*CancelTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_GetTaskOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).GetTaskOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_GetTaskOutput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).GetTaskOutput(ctx, req.(*GetTaskOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OperatorService_ServiceDesc is the grpc.ServiceDesc for OperatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OperatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "operator.v1.OperatorService",
	HandlerType: (*OperatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetListenerColor",
			Handler:    _OperatorService_SetListenerColor_Handler,
		},
		{
			MethodName: "SetListenersColor",
			Handler:    _OperatorService_SetListenersColor_Handler,
		},
		{
			MethodName: "SetListenerNote",
			Handler:    _OperatorService_SetListenerNote_Handler,
		},
		{
			MethodName: "SetListenersNote",
			Handler:    _OperatorService_SetListenersNote_Handler,
		},
		{
			MethodName: "SetAntColor",
			Handler:    _OperatorService_SetAntColor_Handler,
		},
		{
			MethodName: "SetAntsColor",
			Handler:    _OperatorService_SetAntsColor_Handler,
		},
		{
			MethodName: "SetAntNote",
			Handler:    _OperatorService_SetAntNote_Handler,
		},
		{
			MethodName: "SetAntsNote",
			Handler:    _OperatorService_SetAntsNote_Handler,
		},
		{
			MethodName: "SetOperatorColor",
			Handler:    _OperatorService_SetOperatorColor_Handler,
		},
		{
			MethodName: "SetOperatorsColor",
			Handler:    _OperatorService_SetOperatorsColor_Handler,
		},
		{
			MethodName: "NewChatMessage",
			Handler:    _OperatorService_NewChatMessage_Handler,
		},
		{
			MethodName: "NewCredential",
			Handler:    _OperatorService_NewCredential_Handler,
		},
		{
			MethodName: "SetCredentialColor",
			Handler:    _OperatorService_SetCredentialColor_Handler,
		},
		{
			MethodName: "SetCredentialsColor",
			Handler:    _OperatorService_SetCredentialsColor_Handler,
		},
		{
			MethodName: "SetCredentialNote",
			Handler:    _OperatorService_SetCredentialNote_Handler,
		},
		{
			MethodName: "SetCredentialsNote",
			Handler:    _OperatorService_SetCredentialsNote_Handler,
		},
		{
			MethodName: "CancelTasks",
			Handler:    _OperatorService_CancelTasks_Handler,
		},
		{
			MethodName: "GetTaskOutput",
			Handler:    _OperatorService_GetTaskOutput_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Hello",
			Handler:       _OperatorService_Hello_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeListeners",
			Handler:       _OperatorService_SubscribeListeners_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeAnts",
			Handler:       _OperatorService_SubscribeAnts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeOperators",
			Handler:       _OperatorService_SubscribeOperators_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeChat",
			Handler:       _OperatorService_SubscribeChat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCredentials",
			Handler:       _OperatorService_SubscribeCredentials_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeTasks",
			Handler:       _OperatorService_SubscribeTasks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "NewCommand",
			Handler:       _OperatorService_NewCommand_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "operator/v1/operator.proto",
}
