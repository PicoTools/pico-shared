// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.29.2
// source: operator/v1/operator.proto

package operatorv1

import (
	v1 "github.com/PicoTools/pico-shared/proto/gen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message to transfer session cookie
type SessionCookie struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] value of session cookie
	Value         string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionCookie) Reset() {
	*x = SessionCookie{}
	mi := &file_operator_v1_operator_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionCookie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionCookie) ProtoMessage() {}

func (x *SessionCookie) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionCookie.ProtoReflect.Descriptor instead.
func (*SessionCookie) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{0}
}

func (x *SessionCookie) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// --> CancelTasks
type CancelTasksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's session cookie
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [MANDATORY] Ant's ID
	Id            uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelTasksRequest) Reset() {
	*x = CancelTasksRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTasksRequest) ProtoMessage() {}

func (x *CancelTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTasksRequest.ProtoReflect.Descriptor instead.
func (*CancelTasksRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{1}
}

func (x *CancelTasksRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *CancelTasksRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CancelTasksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelTasksResponse) Reset() {
	*x = CancelTasksResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTasksResponse) ProtoMessage() {}

func (x *CancelTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTasksResponse.ProtoReflect.Descriptor instead.
func (*CancelTasksResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{2}
}

// --> SetCredentialsNote
type SetCredentialsNoteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's session cookie
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [MANDATORY] List of credential's IDs
	Ids []int64 `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	// [MANDATORY] Note to set on list of credentials
	Note          string `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetCredentialsNoteRequest) Reset() {
	*x = SetCredentialsNoteRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCredentialsNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCredentialsNoteRequest) ProtoMessage() {}

func (x *SetCredentialsNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCredentialsNoteRequest.ProtoReflect.Descriptor instead.
func (*SetCredentialsNoteRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{3}
}

func (x *SetCredentialsNoteRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetCredentialsNoteRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *SetCredentialsNoteRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type SetCredentialsNoteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetCredentialsNoteResponse) Reset() {
	*x = SetCredentialsNoteResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCredentialsNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCredentialsNoteResponse) ProtoMessage() {}

func (x *SetCredentialsNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCredentialsNoteResponse.ProtoReflect.Descriptor instead.
func (*SetCredentialsNoteResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{4}
}

// --> SetCredentialNote
type SetCredentialNoteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's session cookie
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [MANDATORY] Credential's ID
	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// [MANDATORY] Note to set on credential
	Note          string `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetCredentialNoteRequest) Reset() {
	*x = SetCredentialNoteRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCredentialNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCredentialNoteRequest) ProtoMessage() {}

func (x *SetCredentialNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCredentialNoteRequest.ProtoReflect.Descriptor instead.
func (*SetCredentialNoteRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{5}
}

func (x *SetCredentialNoteRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetCredentialNoteRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetCredentialNoteRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type SetCredentialNoteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetCredentialNoteResponse) Reset() {
	*x = SetCredentialNoteResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCredentialNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCredentialNoteResponse) ProtoMessage() {}

func (x *SetCredentialNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCredentialNoteResponse.ProtoReflect.Descriptor instead.
func (*SetCredentialNoteResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{6}
}

// --> SetCredentialsColor
type SetCredentialsColorRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's session cookie
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [MANDATORY] List of credential's IDs
	Ids []int64 `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	// [MANDATORY] Color to set on list of credentials
	Color         *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetCredentialsColorRequest) Reset() {
	*x = SetCredentialsColorRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCredentialsColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCredentialsColorRequest) ProtoMessage() {}

func (x *SetCredentialsColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCredentialsColorRequest.ProtoReflect.Descriptor instead.
func (*SetCredentialsColorRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{7}
}

func (x *SetCredentialsColorRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetCredentialsColorRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *SetCredentialsColorRequest) GetColor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Color
	}
	return nil
}

type SetCredentialsColorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetCredentialsColorResponse) Reset() {
	*x = SetCredentialsColorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCredentialsColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCredentialsColorResponse) ProtoMessage() {}

func (x *SetCredentialsColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCredentialsColorResponse.ProtoReflect.Descriptor instead.
func (*SetCredentialsColorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{8}
}

// --> SetCredentialColor
type SetCredentialColorRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's session cookie
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [MANDATORY] Credential's ID
	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// [MANDATORY] Color to set on credential
	Color         *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetCredentialColorRequest) Reset() {
	*x = SetCredentialColorRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCredentialColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCredentialColorRequest) ProtoMessage() {}

func (x *SetCredentialColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCredentialColorRequest.ProtoReflect.Descriptor instead.
func (*SetCredentialColorRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{9}
}

func (x *SetCredentialColorRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetCredentialColorRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetCredentialColorRequest) GetColor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Color
	}
	return nil
}

type SetCredentialColorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetCredentialColorResponse) Reset() {
	*x = SetCredentialColorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCredentialColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCredentialColorResponse) ProtoMessage() {}

func (x *SetCredentialColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCredentialColorResponse.ProtoReflect.Descriptor instead.
func (*SetCredentialColorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{10}
}

// --> NewCredential
type NewCredentialRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's session cookie
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// Username
	Username *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Password
	Password *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// Realm
	Realm *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=realm,proto3" json:"realm,omitempty"`
	// Host
	Host          *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewCredentialRequest) Reset() {
	*x = NewCredentialRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewCredentialRequest) ProtoMessage() {}

func (x *NewCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewCredentialRequest.ProtoReflect.Descriptor instead.
func (*NewCredentialRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{11}
}

func (x *NewCredentialRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *NewCredentialRequest) GetUsername() *wrapperspb.StringValue {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *NewCredentialRequest) GetPassword() *wrapperspb.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *NewCredentialRequest) GetRealm() *wrapperspb.StringValue {
	if x != nil {
		return x.Realm
	}
	return nil
}

func (x *NewCredentialRequest) GetHost() *wrapperspb.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

type NewCredentialResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewCredentialResponse) Reset() {
	*x = NewCredentialResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewCredentialResponse) ProtoMessage() {}

func (x *NewCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewCredentialResponse.ProtoReflect.Descriptor instead.
func (*NewCredentialResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{12}
}

// --> NewChatMessage
type NewChatMessageRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's session cookie
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [MANDATORY] Message in chat
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewChatMessageRequest) Reset() {
	*x = NewChatMessageRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewChatMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewChatMessageRequest) ProtoMessage() {}

func (x *NewChatMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewChatMessageRequest.ProtoReflect.Descriptor instead.
func (*NewChatMessageRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{13}
}

func (x *NewChatMessageRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *NewChatMessageRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type NewChatMessageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewChatMessageResponse) Reset() {
	*x = NewChatMessageResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewChatMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewChatMessageResponse) ProtoMessage() {}

func (x *NewChatMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewChatMessageResponse.ProtoReflect.Descriptor instead.
func (*NewChatMessageResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{14}
}

// --> SetOperatorsColor
type SetOperatorsColorRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's session cookie
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [MANDATORY] List of operator's usernames
	Usernames []string `protobuf:"bytes,2,rep,name=usernames,proto3" json:"usernames,omitempty"`
	// [MANDATORY] Color to set on list of operators
	Color         *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetOperatorsColorRequest) Reset() {
	*x = SetOperatorsColorRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetOperatorsColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOperatorsColorRequest) ProtoMessage() {}

func (x *SetOperatorsColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOperatorsColorRequest.ProtoReflect.Descriptor instead.
func (*SetOperatorsColorRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{15}
}

func (x *SetOperatorsColorRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetOperatorsColorRequest) GetUsernames() []string {
	if x != nil {
		return x.Usernames
	}
	return nil
}

func (x *SetOperatorsColorRequest) GetColor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Color
	}
	return nil
}

type SetOperatorsColorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetOperatorsColorResponse) Reset() {
	*x = SetOperatorsColorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetOperatorsColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOperatorsColorResponse) ProtoMessage() {}

func (x *SetOperatorsColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOperatorsColorResponse.ProtoReflect.Descriptor instead.
func (*SetOperatorsColorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{16}
}

// --> SetOperatorColor
type SetOperatorColorRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's session cookie
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [MANDATORY] Operator's username
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// [MANDATORY] Color to set on operator
	Color         *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetOperatorColorRequest) Reset() {
	*x = SetOperatorColorRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetOperatorColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOperatorColorRequest) ProtoMessage() {}

func (x *SetOperatorColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOperatorColorRequest.ProtoReflect.Descriptor instead.
func (*SetOperatorColorRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{17}
}

func (x *SetOperatorColorRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetOperatorColorRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SetOperatorColorRequest) GetColor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Color
	}
	return nil
}

type SetOperatorColorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetOperatorColorResponse) Reset() {
	*x = SetOperatorColorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetOperatorColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOperatorColorResponse) ProtoMessage() {}

func (x *SetOperatorColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOperatorColorResponse.ProtoReflect.Descriptor instead.
func (*SetOperatorColorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{18}
}

// --> SetListenerNote
type SetListenerNoteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's session cookie
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [MANDATORY] Listener's ID
	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// [MANDATORY] Note to set on listener
	Note          string `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetListenerNoteRequest) Reset() {
	*x = SetListenerNoteRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetListenerNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetListenerNoteRequest) ProtoMessage() {}

func (x *SetListenerNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetListenerNoteRequest.ProtoReflect.Descriptor instead.
func (*SetListenerNoteRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{19}
}

func (x *SetListenerNoteRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetListenerNoteRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetListenerNoteRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type SetListenerNoteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetListenerNoteResponse) Reset() {
	*x = SetListenerNoteResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetListenerNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetListenerNoteResponse) ProtoMessage() {}

func (x *SetListenerNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetListenerNoteResponse.ProtoReflect.Descriptor instead.
func (*SetListenerNoteResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{20}
}

// --> SetAntsNote
type SetAntsNoteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's session cookie
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [MANDATORY] List of ant's IDs
	Ids []uint32 `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	// [MANDATORY] Note to set on list of ants
	Note          string `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetAntsNoteRequest) Reset() {
	*x = SetAntsNoteRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAntsNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAntsNoteRequest) ProtoMessage() {}

func (x *SetAntsNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAntsNoteRequest.ProtoReflect.Descriptor instead.
func (*SetAntsNoteRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{21}
}

func (x *SetAntsNoteRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetAntsNoteRequest) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *SetAntsNoteRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type SetAntsNoteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetAntsNoteResponse) Reset() {
	*x = SetAntsNoteResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAntsNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAntsNoteResponse) ProtoMessage() {}

func (x *SetAntsNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAntsNoteResponse.ProtoReflect.Descriptor instead.
func (*SetAntsNoteResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{22}
}

// --> SetAntNote
type SetAntNoteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's session cookie
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [MANDATORY] Ant's ID
	Id uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// [MANDATORY] Note to set on ant
	Note          string `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetAntNoteRequest) Reset() {
	*x = SetAntNoteRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAntNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAntNoteRequest) ProtoMessage() {}

func (x *SetAntNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAntNoteRequest.ProtoReflect.Descriptor instead.
func (*SetAntNoteRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{23}
}

func (x *SetAntNoteRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetAntNoteRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetAntNoteRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type SetAntNoteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetAntNoteResponse) Reset() {
	*x = SetAntNoteResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAntNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAntNoteResponse) ProtoMessage() {}

func (x *SetAntNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAntNoteResponse.ProtoReflect.Descriptor instead.
func (*SetAntNoteResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{24}
}

// --> SetAntsColor
type SetAntsColorRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's session cookie
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [MANDATORY] List of ant's IDs
	Ids []uint32 `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	// [MANDATORY] Color to set on list of ants
	Color         *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetAntsColorRequest) Reset() {
	*x = SetAntsColorRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAntsColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAntsColorRequest) ProtoMessage() {}

func (x *SetAntsColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAntsColorRequest.ProtoReflect.Descriptor instead.
func (*SetAntsColorRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{25}
}

func (x *SetAntsColorRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetAntsColorRequest) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *SetAntsColorRequest) GetColor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Color
	}
	return nil
}

type SetAntsColorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetAntsColorResponse) Reset() {
	*x = SetAntsColorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAntsColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAntsColorResponse) ProtoMessage() {}

func (x *SetAntsColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAntsColorResponse.ProtoReflect.Descriptor instead.
func (*SetAntsColorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{26}
}

// --> SetAntColor
type SetAntColorRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's session cookie
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [MANDATORY] Ant's ID
	Id uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// [MANDATORY] Color to set on ant
	Color         *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetAntColorRequest) Reset() {
	*x = SetAntColorRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAntColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAntColorRequest) ProtoMessage() {}

func (x *SetAntColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAntColorRequest.ProtoReflect.Descriptor instead.
func (*SetAntColorRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{27}
}

func (x *SetAntColorRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetAntColorRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetAntColorRequest) GetColor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Color
	}
	return nil
}

type SetAntColorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetAntColorResponse) Reset() {
	*x = SetAntColorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAntColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAntColorResponse) ProtoMessage() {}

func (x *SetAntColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAntColorResponse.ProtoReflect.Descriptor instead.
func (*SetAntColorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{28}
}

// --> SetListenersNote
type SetListenersNoteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's session cookie
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [MANDATORY] List of listener's IDs
	Ids []int64 `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	// [MANDATORY] Not to set on list of ants
	Note          string `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetListenersNoteRequest) Reset() {
	*x = SetListenersNoteRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetListenersNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetListenersNoteRequest) ProtoMessage() {}

func (x *SetListenersNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetListenersNoteRequest.ProtoReflect.Descriptor instead.
func (*SetListenersNoteRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{29}
}

func (x *SetListenersNoteRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetListenersNoteRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *SetListenersNoteRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type SetListenersNoteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetListenersNoteResponse) Reset() {
	*x = SetListenersNoteResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetListenersNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetListenersNoteResponse) ProtoMessage() {}

func (x *SetListenersNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetListenersNoteResponse.ProtoReflect.Descriptor instead.
func (*SetListenersNoteResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{30}
}

// --> SetListenersColor
type SetListenersColorRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's session cookie
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [MANDATORY] List of listener's IDs
	Ids []int64 `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	// [MANDATORY] Color to set on list of listeners
	Color         *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetListenersColorRequest) Reset() {
	*x = SetListenersColorRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetListenersColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetListenersColorRequest) ProtoMessage() {}

func (x *SetListenersColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetListenersColorRequest.ProtoReflect.Descriptor instead.
func (*SetListenersColorRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{31}
}

func (x *SetListenersColorRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetListenersColorRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *SetListenersColorRequest) GetColor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Color
	}
	return nil
}

type SetListenersColorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetListenersColorResponse) Reset() {
	*x = SetListenersColorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetListenersColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetListenersColorResponse) ProtoMessage() {}

func (x *SetListenersColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetListenersColorResponse.ProtoReflect.Descriptor instead.
func (*SetListenersColorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{32}
}

// --> SetListenerColor
type SetListenerColorRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's session cookie
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [MANDATORY] Listener's ID
	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// [MANDATORY] Color to set on listener
	Color         *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetListenerColorRequest) Reset() {
	*x = SetListenerColorRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetListenerColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetListenerColorRequest) ProtoMessage() {}

func (x *SetListenerColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetListenerColorRequest.ProtoReflect.Descriptor instead.
func (*SetListenerColorRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{33}
}

func (x *SetListenerColorRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetListenerColorRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetListenerColorRequest) GetColor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Color
	}
	return nil
}

type SetListenerColorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetListenerColorResponse) Reset() {
	*x = SetListenerColorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetListenerColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetListenerColorResponse) ProtoMessage() {}

func (x *SetListenerColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetListenerColorResponse.ProtoReflect.Descriptor instead.
func (*SetListenerColorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{34}
}

// --> Hello
type HelloRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's client version
	Version       string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HelloRequest) Reset() {
	*x = HelloRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HelloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloRequest) ProtoMessage() {}

func (x *HelloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloRequest.ProtoReflect.Descriptor instead.
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{35}
}

func (x *HelloRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Message with handshake data from server
type HandshakeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's username
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// [MANDATORY] Current server's timestamp
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// [MANDATORY] Operator's session cookie
	Cookie        *SessionCookie `protobuf:"bytes,3,opt,name=cookie,proto3" json:"cookie,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HandshakeResponse) Reset() {
	*x = HandshakeResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandshakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandshakeResponse) ProtoMessage() {}

func (x *HandshakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandshakeResponse.ProtoReflect.Descriptor instead.
func (*HandshakeResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{36}
}

func (x *HandshakeResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *HandshakeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *HandshakeResponse) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

type HelloResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*HelloResponse_Handshake
	//	*HelloResponse_Empty
	Response      isHelloResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HelloResponse) Reset() {
	*x = HelloResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HelloResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloResponse) ProtoMessage() {}

func (x *HelloResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloResponse.ProtoReflect.Descriptor instead.
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{37}
}

func (x *HelloResponse) GetResponse() isHelloResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *HelloResponse) GetHandshake() *HandshakeResponse {
	if x != nil {
		if x, ok := x.Response.(*HelloResponse_Handshake); ok {
			return x.Handshake
		}
	}
	return nil
}

func (x *HelloResponse) GetEmpty() *emptypb.Empty {
	if x != nil {
		if x, ok := x.Response.(*HelloResponse_Empty); ok {
			return x.Empty
		}
	}
	return nil
}

type isHelloResponse_Response interface {
	isHelloResponse_Response()
}

type HelloResponse_Handshake struct {
	Handshake *HandshakeResponse `protobuf:"bytes,1,opt,name=handshake,proto3,oneof"`
}

type HelloResponse_Empty struct {
	Empty *emptypb.Empty `protobuf:"bytes,2,opt,name=empty,proto3,oneof"`
}

func (*HelloResponse_Handshake) isHelloResponse_Response() {}

func (*HelloResponse_Empty) isHelloResponse_Response() {}

// --> SubscribeListeners
type SubscribeListenersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's session cookie
	Cookie        *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeListenersRequest) Reset() {
	*x = SubscribeListenersRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeListenersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeListenersRequest) ProtoMessage() {}

func (x *SubscribeListenersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeListenersRequest.ProtoReflect.Descriptor instead.
func (*SubscribeListenersRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{38}
}

func (x *SubscribeListenersRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

type ListenerResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Listener's ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of listener. Can be string with maximum length of 256
	Name *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// IP address which used to serving ant's server
	Ip *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	// Port which used to serving ant's server
	Port *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
	// Color of listener
	Color *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
	// Note of listener
	Note *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=note,proto3" json:"note,omitempty"`
	// Last checkout timestamp
	Last          *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last,proto3" json:"last,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListenerResponse) Reset() {
	*x = ListenerResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerResponse) ProtoMessage() {}

func (x *ListenerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerResponse.ProtoReflect.Descriptor instead.
func (*ListenerResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{39}
}

func (x *ListenerResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListenerResponse) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ListenerResponse) GetIp() *wrapperspb.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *ListenerResponse) GetPort() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *ListenerResponse) GetColor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *ListenerResponse) GetNote() *wrapperspb.StringValue {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *ListenerResponse) GetLast() *timestamppb.Timestamp {
	if x != nil {
		return x.Last
	}
	return nil
}

type ListenersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Listeners     []*ListenerResponse    `protobuf:"bytes,1,rep,name=listeners,proto3" json:"listeners,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListenersResponse) Reset() {
	*x = ListenersResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenersResponse) ProtoMessage() {}

func (x *ListenersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenersResponse.ProtoReflect.Descriptor instead.
func (*ListenersResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{40}
}

func (x *ListenersResponse) GetListeners() []*ListenerResponse {
	if x != nil {
		return x.Listeners
	}
	return nil
}

type ListenerColorResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Listener's ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// New color of listener
	Color         *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListenerColorResponse) Reset() {
	*x = ListenerColorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenerColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerColorResponse) ProtoMessage() {}

func (x *ListenerColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerColorResponse.ProtoReflect.Descriptor instead.
func (*ListenerColorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{41}
}

func (x *ListenerColorResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListenerColorResponse) GetColor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Color
	}
	return nil
}

type ListenerNoteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Listener's ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// New note on listener
	Note          *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListenerNoteResponse) Reset() {
	*x = ListenerNoteResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenerNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerNoteResponse) ProtoMessage() {}

func (x *ListenerNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerNoteResponse.ProtoReflect.Descriptor instead.
func (*ListenerNoteResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{42}
}

func (x *ListenerNoteResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListenerNoteResponse) GetNote() *wrapperspb.StringValue {
	if x != nil {
		return x.Note
	}
	return nil
}

type ListenerInfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Listener's ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of listener. Can be string with maximum length of 256
	Name *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// IP address which used to serving ant's server
	Ip *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	// Port which used to serving ant's server
	Port          *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListenerInfoResponse) Reset() {
	*x = ListenerInfoResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenerInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerInfoResponse) ProtoMessage() {}

func (x *ListenerInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerInfoResponse.ProtoReflect.Descriptor instead.
func (*ListenerInfoResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{43}
}

func (x *ListenerInfoResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListenerInfoResponse) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ListenerInfoResponse) GetIp() *wrapperspb.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *ListenerInfoResponse) GetPort() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Port
	}
	return nil
}

type ListenerLastResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Listener's ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Last checkout timestamp
	Last          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last,proto3" json:"last,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListenerLastResponse) Reset() {
	*x = ListenerLastResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenerLastResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerLastResponse) ProtoMessage() {}

func (x *ListenerLastResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerLastResponse.ProtoReflect.Descriptor instead.
func (*ListenerLastResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{44}
}

func (x *ListenerLastResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListenerLastResponse) GetLast() *timestamppb.Timestamp {
	if x != nil {
		return x.Last
	}
	return nil
}

type SubscribeListenersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*SubscribeListenersResponse_Listener
	//	*SubscribeListenersResponse_Listeners
	//	*SubscribeListenersResponse_Color
	//	*SubscribeListenersResponse_Note
	//	*SubscribeListenersResponse_Info
	//	*SubscribeListenersResponse_Last
	Response      isSubscribeListenersResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeListenersResponse) Reset() {
	*x = SubscribeListenersResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeListenersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeListenersResponse) ProtoMessage() {}

func (x *SubscribeListenersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeListenersResponse.ProtoReflect.Descriptor instead.
func (*SubscribeListenersResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{45}
}

func (x *SubscribeListenersResponse) GetResponse() isSubscribeListenersResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *SubscribeListenersResponse) GetListener() *ListenerResponse {
	if x != nil {
		if x, ok := x.Response.(*SubscribeListenersResponse_Listener); ok {
			return x.Listener
		}
	}
	return nil
}

func (x *SubscribeListenersResponse) GetListeners() *ListenersResponse {
	if x != nil {
		if x, ok := x.Response.(*SubscribeListenersResponse_Listeners); ok {
			return x.Listeners
		}
	}
	return nil
}

func (x *SubscribeListenersResponse) GetColor() *ListenerColorResponse {
	if x != nil {
		if x, ok := x.Response.(*SubscribeListenersResponse_Color); ok {
			return x.Color
		}
	}
	return nil
}

func (x *SubscribeListenersResponse) GetNote() *ListenerNoteResponse {
	if x != nil {
		if x, ok := x.Response.(*SubscribeListenersResponse_Note); ok {
			return x.Note
		}
	}
	return nil
}

func (x *SubscribeListenersResponse) GetInfo() *ListenerInfoResponse {
	if x != nil {
		if x, ok := x.Response.(*SubscribeListenersResponse_Info); ok {
			return x.Info
		}
	}
	return nil
}

func (x *SubscribeListenersResponse) GetLast() *ListenerLastResponse {
	if x != nil {
		if x, ok := x.Response.(*SubscribeListenersResponse_Last); ok {
			return x.Last
		}
	}
	return nil
}

type isSubscribeListenersResponse_Response interface {
	isSubscribeListenersResponse_Response()
}

type SubscribeListenersResponse_Listener struct {
	Listener *ListenerResponse `protobuf:"bytes,1,opt,name=listener,proto3,oneof"`
}

type SubscribeListenersResponse_Listeners struct {
	Listeners *ListenersResponse `protobuf:"bytes,2,opt,name=listeners,proto3,oneof"`
}

type SubscribeListenersResponse_Color struct {
	Color *ListenerColorResponse `protobuf:"bytes,3,opt,name=color,proto3,oneof"`
}

type SubscribeListenersResponse_Note struct {
	Note *ListenerNoteResponse `protobuf:"bytes,4,opt,name=note,proto3,oneof"`
}

type SubscribeListenersResponse_Info struct {
	Info *ListenerInfoResponse `protobuf:"bytes,5,opt,name=info,proto3,oneof"`
}

type SubscribeListenersResponse_Last struct {
	Last *ListenerLastResponse `protobuf:"bytes,6,opt,name=last,proto3,oneof"`
}

func (*SubscribeListenersResponse_Listener) isSubscribeListenersResponse_Response() {}

func (*SubscribeListenersResponse_Listeners) isSubscribeListenersResponse_Response() {}

func (*SubscribeListenersResponse_Color) isSubscribeListenersResponse_Response() {}

func (*SubscribeListenersResponse_Note) isSubscribeListenersResponse_Response() {}

func (*SubscribeListenersResponse_Info) isSubscribeListenersResponse_Response() {}

func (*SubscribeListenersResponse_Last) isSubscribeListenersResponse_Response() {}

// --> SubscribeAnts
type SubscribeAntsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's session cookie
	Cookie        *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeAntsRequest) Reset() {
	*x = SubscribeAntsRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeAntsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeAntsRequest) ProtoMessage() {}

func (x *SubscribeAntsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeAntsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeAntsRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{46}
}

func (x *SubscribeAntsRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

type AntResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Ant's ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// [MANDATORY] Listener's ID
	Lid int64 `protobuf:"varint,2,opt,name=lid,proto3" json:"lid,omitempty"`
	// External IP address of ant
	ExtIp *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=ext_ip,json=extIp,proto3" json:"ext_ip,omitempty"`
	// Internal IP address of ant
	IntIp *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=int_ip,json=intIp,proto3" json:"int_ip,omitempty"`
	// [MANDATORY] Operating system type
	Os uint32 `protobuf:"varint,5,opt,name=os,proto3" json:"os,omitempty"`
	// Operating system meta information (for example kernel version)
	OsMeta *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=os_meta,json=osMeta,proto3" json:"os_meta,omitempty"`
	// Hostname of compromised target
	Hostname *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Username under which ant's process is working
	Username *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=username,proto3" json:"username,omitempty"`
	// Domain name of compromised target
	Domain *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=domain,proto3" json:"domain,omitempty"`
	// Is process privilged (root, high intergity, etc)
	Privileged *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=privileged,proto3" json:"privileged,omitempty"`
	// Name of ant's process
	ProcName *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=proc_name,json=procName,proto3" json:"proc_name,omitempty"`
	// Ant's process ID
	Pid *wrapperspb.UInt64Value `protobuf:"bytes,12,opt,name=pid,proto3" json:"pid,omitempty"`
	// [MANDATORY] Process architecture
	Arch uint32 `protobuf:"varint,13,opt,name=arch,proto3" json:"arch,omitempty"`
	// [MANDATORY] Sleep value of ant's process (in seconds)
	Sleep uint32 `protobuf:"varint,14,opt,name=sleep,proto3" json:"sleep,omitempty"`
	// [MANDATORY] Jitter value of ant's process (in range 1-99)
	Jitter uint32 `protobuf:"varint,15,opt,name=jitter,proto3" json:"jitter,omitempty"`
	// [MANDATORY] Binary mask represented supported ant's capabilities
	Caps uint32 `protobuf:"varint,16,opt,name=caps,proto3" json:"caps,omitempty"`
	// Color of ant
	Color *wrapperspb.UInt32Value `protobuf:"bytes,17,opt,name=color,proto3" json:"color,omitempty"`
	// Note of ant
	Note *wrapperspb.StringValue `protobuf:"bytes,18,opt,name=note,proto3" json:"note,omitempty"`
	// First checkout timestamp
	First *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=first,proto3" json:"first,omitempty"`
	// Last checkout timestamp
	Last          *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=last,proto3" json:"last,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AntResponse) Reset() {
	*x = AntResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AntResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntResponse) ProtoMessage() {}

func (x *AntResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntResponse.ProtoReflect.Descriptor instead.
func (*AntResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{47}
}

func (x *AntResponse) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AntResponse) GetLid() int64 {
	if x != nil {
		return x.Lid
	}
	return 0
}

func (x *AntResponse) GetExtIp() *wrapperspb.StringValue {
	if x != nil {
		return x.ExtIp
	}
	return nil
}

func (x *AntResponse) GetIntIp() *wrapperspb.StringValue {
	if x != nil {
		return x.IntIp
	}
	return nil
}

func (x *AntResponse) GetOs() uint32 {
	if x != nil {
		return x.Os
	}
	return 0
}

func (x *AntResponse) GetOsMeta() *wrapperspb.StringValue {
	if x != nil {
		return x.OsMeta
	}
	return nil
}

func (x *AntResponse) GetHostname() *wrapperspb.StringValue {
	if x != nil {
		return x.Hostname
	}
	return nil
}

func (x *AntResponse) GetUsername() *wrapperspb.StringValue {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *AntResponse) GetDomain() *wrapperspb.StringValue {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *AntResponse) GetPrivileged() *wrapperspb.BoolValue {
	if x != nil {
		return x.Privileged
	}
	return nil
}

func (x *AntResponse) GetProcName() *wrapperspb.StringValue {
	if x != nil {
		return x.ProcName
	}
	return nil
}

func (x *AntResponse) GetPid() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Pid
	}
	return nil
}

func (x *AntResponse) GetArch() uint32 {
	if x != nil {
		return x.Arch
	}
	return 0
}

func (x *AntResponse) GetSleep() uint32 {
	if x != nil {
		return x.Sleep
	}
	return 0
}

func (x *AntResponse) GetJitter() uint32 {
	if x != nil {
		return x.Jitter
	}
	return 0
}

func (x *AntResponse) GetCaps() uint32 {
	if x != nil {
		return x.Caps
	}
	return 0
}

func (x *AntResponse) GetColor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *AntResponse) GetNote() *wrapperspb.StringValue {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *AntResponse) GetFirst() *timestamppb.Timestamp {
	if x != nil {
		return x.First
	}
	return nil
}

func (x *AntResponse) GetLast() *timestamppb.Timestamp {
	if x != nil {
		return x.Last
	}
	return nil
}

type AntsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of ants
	Ants          []*AntResponse `protobuf:"bytes,1,rep,name=ants,proto3" json:"ants,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AntsResponse) Reset() {
	*x = AntsResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AntsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntsResponse) ProtoMessage() {}

func (x *AntsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntsResponse.ProtoReflect.Descriptor instead.
func (*AntsResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{48}
}

func (x *AntsResponse) GetAnts() []*AntResponse {
	if x != nil {
		return x.Ants
	}
	return nil
}

type AntColorResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Ant's ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// New color of ant
	Color         *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AntColorResponse) Reset() {
	*x = AntColorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AntColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntColorResponse) ProtoMessage() {}

func (x *AntColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntColorResponse.ProtoReflect.Descriptor instead.
func (*AntColorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{49}
}

func (x *AntColorResponse) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AntColorResponse) GetColor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Color
	}
	return nil
}

type AntNoteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Ant's ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// New note of ant
	Note          *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AntNoteResponse) Reset() {
	*x = AntNoteResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AntNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntNoteResponse) ProtoMessage() {}

func (x *AntNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntNoteResponse.ProtoReflect.Descriptor instead.
func (*AntNoteResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{50}
}

func (x *AntNoteResponse) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AntNoteResponse) GetNote() *wrapperspb.StringValue {
	if x != nil {
		return x.Note
	}
	return nil
}

type AntLastResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Ant's ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Updated last checkout timestamp
	Last          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last,proto3" json:"last,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AntLastResponse) Reset() {
	*x = AntLastResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AntLastResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntLastResponse) ProtoMessage() {}

func (x *AntLastResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntLastResponse.ProtoReflect.Descriptor instead.
func (*AntLastResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{51}
}

func (x *AntLastResponse) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AntLastResponse) GetLast() *timestamppb.Timestamp {
	if x != nil {
		return x.Last
	}
	return nil
}

type AntSleepResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Ant's ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// [MANDATORY] Updated sleep value of ant
	Sleep uint32 `protobuf:"varint,2,opt,name=sleep,proto3" json:"sleep,omitempty"`
	// [MANDATORY] Updated jitter value of ant
	Jitter        uint32 `protobuf:"varint,3,opt,name=jitter,proto3" json:"jitter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AntSleepResponse) Reset() {
	*x = AntSleepResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AntSleepResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntSleepResponse) ProtoMessage() {}

func (x *AntSleepResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntSleepResponse.ProtoReflect.Descriptor instead.
func (*AntSleepResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{52}
}

func (x *AntSleepResponse) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AntSleepResponse) GetSleep() uint32 {
	if x != nil {
		return x.Sleep
	}
	return 0
}

func (x *AntSleepResponse) GetJitter() uint32 {
	if x != nil {
		return x.Jitter
	}
	return 0
}

type SubscribeAntsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*SubscribeAntsResponse_Ant
	//	*SubscribeAntsResponse_Ants
	//	*SubscribeAntsResponse_Color
	//	*SubscribeAntsResponse_Note
	//	*SubscribeAntsResponse_Last
	//	*SubscribeAntsResponse_Sleep
	Response      isSubscribeAntsResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeAntsResponse) Reset() {
	*x = SubscribeAntsResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeAntsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeAntsResponse) ProtoMessage() {}

func (x *SubscribeAntsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeAntsResponse.ProtoReflect.Descriptor instead.
func (*SubscribeAntsResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{53}
}

func (x *SubscribeAntsResponse) GetResponse() isSubscribeAntsResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *SubscribeAntsResponse) GetAnt() *AntResponse {
	if x != nil {
		if x, ok := x.Response.(*SubscribeAntsResponse_Ant); ok {
			return x.Ant
		}
	}
	return nil
}

func (x *SubscribeAntsResponse) GetAnts() *AntsResponse {
	if x != nil {
		if x, ok := x.Response.(*SubscribeAntsResponse_Ants); ok {
			return x.Ants
		}
	}
	return nil
}

func (x *SubscribeAntsResponse) GetColor() *AntColorResponse {
	if x != nil {
		if x, ok := x.Response.(*SubscribeAntsResponse_Color); ok {
			return x.Color
		}
	}
	return nil
}

func (x *SubscribeAntsResponse) GetNote() *AntNoteResponse {
	if x != nil {
		if x, ok := x.Response.(*SubscribeAntsResponse_Note); ok {
			return x.Note
		}
	}
	return nil
}

func (x *SubscribeAntsResponse) GetLast() *AntLastResponse {
	if x != nil {
		if x, ok := x.Response.(*SubscribeAntsResponse_Last); ok {
			return x.Last
		}
	}
	return nil
}

func (x *SubscribeAntsResponse) GetSleep() *AntSleepResponse {
	if x != nil {
		if x, ok := x.Response.(*SubscribeAntsResponse_Sleep); ok {
			return x.Sleep
		}
	}
	return nil
}

type isSubscribeAntsResponse_Response interface {
	isSubscribeAntsResponse_Response()
}

type SubscribeAntsResponse_Ant struct {
	Ant *AntResponse `protobuf:"bytes,1,opt,name=ant,proto3,oneof"`
}

type SubscribeAntsResponse_Ants struct {
	Ants *AntsResponse `protobuf:"bytes,2,opt,name=ants,proto3,oneof"`
}

type SubscribeAntsResponse_Color struct {
	Color *AntColorResponse `protobuf:"bytes,3,opt,name=color,proto3,oneof"`
}

type SubscribeAntsResponse_Note struct {
	Note *AntNoteResponse `protobuf:"bytes,4,opt,name=note,proto3,oneof"`
}

type SubscribeAntsResponse_Last struct {
	Last *AntLastResponse `protobuf:"bytes,5,opt,name=last,proto3,oneof"`
}

type SubscribeAntsResponse_Sleep struct {
	Sleep *AntSleepResponse `protobuf:"bytes,6,opt,name=sleep,proto3,oneof"`
}

func (*SubscribeAntsResponse_Ant) isSubscribeAntsResponse_Response() {}

func (*SubscribeAntsResponse_Ants) isSubscribeAntsResponse_Response() {}

func (*SubscribeAntsResponse_Color) isSubscribeAntsResponse_Response() {}

func (*SubscribeAntsResponse_Note) isSubscribeAntsResponse_Response() {}

func (*SubscribeAntsResponse_Last) isSubscribeAntsResponse_Response() {}

func (*SubscribeAntsResponse_Sleep) isSubscribeAntsResponse_Response() {}

// --> SubscribeOperators
type SubscribeOperatorsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's session cookie
	Cookie        *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeOperatorsRequest) Reset() {
	*x = SubscribeOperatorsRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeOperatorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeOperatorsRequest) ProtoMessage() {}

func (x *SubscribeOperatorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeOperatorsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeOperatorsRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{54}
}

func (x *SubscribeOperatorsRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

type OperatorResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's username
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Color of operator
	Color *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	// Last checkout timestamp
	Last          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last,proto3" json:"last,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperatorResponse) Reset() {
	*x = OperatorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorResponse) ProtoMessage() {}

func (x *OperatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorResponse.ProtoReflect.Descriptor instead.
func (*OperatorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{55}
}

func (x *OperatorResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *OperatorResponse) GetColor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *OperatorResponse) GetLast() *timestamppb.Timestamp {
	if x != nil {
		return x.Last
	}
	return nil
}

type OperatorsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of operators
	Operators     []*OperatorResponse `protobuf:"bytes,1,rep,name=operators,proto3" json:"operators,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperatorsResponse) Reset() {
	*x = OperatorsResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorsResponse) ProtoMessage() {}

func (x *OperatorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorsResponse.ProtoReflect.Descriptor instead.
func (*OperatorsResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{56}
}

func (x *OperatorsResponse) GetOperators() []*OperatorResponse {
	if x != nil {
		return x.Operators
	}
	return nil
}

type OperatorLastResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's username
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Last checkout timestamp
	Last          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last,proto3" json:"last,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperatorLastResponse) Reset() {
	*x = OperatorLastResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorLastResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorLastResponse) ProtoMessage() {}

func (x *OperatorLastResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorLastResponse.ProtoReflect.Descriptor instead.
func (*OperatorLastResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{57}
}

func (x *OperatorLastResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *OperatorLastResponse) GetLast() *timestamppb.Timestamp {
	if x != nil {
		return x.Last
	}
	return nil
}

type OperatorColorResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's username
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// New color of operator
	Color         *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperatorColorResponse) Reset() {
	*x = OperatorColorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorColorResponse) ProtoMessage() {}

func (x *OperatorColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorColorResponse.ProtoReflect.Descriptor instead.
func (*OperatorColorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{58}
}

func (x *OperatorColorResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *OperatorColorResponse) GetColor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Color
	}
	return nil
}

type SubscribeOperatorsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*SubscribeOperatorsResponse_Operator
	//	*SubscribeOperatorsResponse_Last
	//	*SubscribeOperatorsResponse_Color
	//	*SubscribeOperatorsResponse_Operators
	Response      isSubscribeOperatorsResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeOperatorsResponse) Reset() {
	*x = SubscribeOperatorsResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeOperatorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeOperatorsResponse) ProtoMessage() {}

func (x *SubscribeOperatorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeOperatorsResponse.ProtoReflect.Descriptor instead.
func (*SubscribeOperatorsResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{59}
}

func (x *SubscribeOperatorsResponse) GetResponse() isSubscribeOperatorsResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *SubscribeOperatorsResponse) GetOperator() *OperatorResponse {
	if x != nil {
		if x, ok := x.Response.(*SubscribeOperatorsResponse_Operator); ok {
			return x.Operator
		}
	}
	return nil
}

func (x *SubscribeOperatorsResponse) GetLast() *OperatorLastResponse {
	if x != nil {
		if x, ok := x.Response.(*SubscribeOperatorsResponse_Last); ok {
			return x.Last
		}
	}
	return nil
}

func (x *SubscribeOperatorsResponse) GetColor() *OperatorColorResponse {
	if x != nil {
		if x, ok := x.Response.(*SubscribeOperatorsResponse_Color); ok {
			return x.Color
		}
	}
	return nil
}

func (x *SubscribeOperatorsResponse) GetOperators() *OperatorsResponse {
	if x != nil {
		if x, ok := x.Response.(*SubscribeOperatorsResponse_Operators); ok {
			return x.Operators
		}
	}
	return nil
}

type isSubscribeOperatorsResponse_Response interface {
	isSubscribeOperatorsResponse_Response()
}

type SubscribeOperatorsResponse_Operator struct {
	Operator *OperatorResponse `protobuf:"bytes,1,opt,name=operator,proto3,oneof"`
}

type SubscribeOperatorsResponse_Last struct {
	Last *OperatorLastResponse `protobuf:"bytes,2,opt,name=last,proto3,oneof"`
}

type SubscribeOperatorsResponse_Color struct {
	Color *OperatorColorResponse `protobuf:"bytes,3,opt,name=color,proto3,oneof"`
}

type SubscribeOperatorsResponse_Operators struct {
	Operators *OperatorsResponse `protobuf:"bytes,4,opt,name=operators,proto3,oneof"`
}

func (*SubscribeOperatorsResponse_Operator) isSubscribeOperatorsResponse_Response() {}

func (*SubscribeOperatorsResponse_Last) isSubscribeOperatorsResponse_Response() {}

func (*SubscribeOperatorsResponse_Color) isSubscribeOperatorsResponse_Response() {}

func (*SubscribeOperatorsResponse_Operators) isSubscribeOperatorsResponse_Response() {}

// --> SubscribeChat
type SubscribeChatRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's session cookie
	Cookie        *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeChatRequest) Reset() {
	*x = SubscribeChatRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeChatRequest) ProtoMessage() {}

func (x *SubscribeChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeChatRequest.ProtoReflect.Descriptor instead.
func (*SubscribeChatRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{60}
}

func (x *SubscribeChatRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

type ChatResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Timestamp of message creation
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Author of message
	From *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// [MANDATORY] Message body
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// [MANDATORY] Is message created by server
	IsServer      bool `protobuf:"varint,4,opt,name=is_server,json=isServer,proto3" json:"is_server,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatResponse) Reset() {
	*x = ChatResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatResponse) ProtoMessage() {}

func (x *ChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatResponse.ProtoReflect.Descriptor instead.
func (*ChatResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{61}
}

func (x *ChatResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ChatResponse) GetFrom() *wrapperspb.StringValue {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ChatResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ChatResponse) GetIsServer() bool {
	if x != nil {
		return x.IsServer
	}
	return false
}

type ChatMessagesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of messages in chat
	Messages      []*ChatResponse `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMessagesResponse) Reset() {
	*x = ChatMessagesResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessagesResponse) ProtoMessage() {}

func (x *ChatMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessagesResponse.ProtoReflect.Descriptor instead.
func (*ChatMessagesResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{62}
}

func (x *ChatMessagesResponse) GetMessages() []*ChatResponse {
	if x != nil {
		return x.Messages
	}
	return nil
}

type SubscribeChatResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*SubscribeChatResponse_Message
	//	*SubscribeChatResponse_Messages
	Response      isSubscribeChatResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeChatResponse) Reset() {
	*x = SubscribeChatResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeChatResponse) ProtoMessage() {}

func (x *SubscribeChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeChatResponse.ProtoReflect.Descriptor instead.
func (*SubscribeChatResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{63}
}

func (x *SubscribeChatResponse) GetResponse() isSubscribeChatResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *SubscribeChatResponse) GetMessage() *ChatResponse {
	if x != nil {
		if x, ok := x.Response.(*SubscribeChatResponse_Message); ok {
			return x.Message
		}
	}
	return nil
}

func (x *SubscribeChatResponse) GetMessages() *ChatMessagesResponse {
	if x != nil {
		if x, ok := x.Response.(*SubscribeChatResponse_Messages); ok {
			return x.Messages
		}
	}
	return nil
}

type isSubscribeChatResponse_Response interface {
	isSubscribeChatResponse_Response()
}

type SubscribeChatResponse_Message struct {
	Message *ChatResponse `protobuf:"bytes,1,opt,name=message,proto3,oneof"`
}

type SubscribeChatResponse_Messages struct {
	Messages *ChatMessagesResponse `protobuf:"bytes,2,opt,name=messages,proto3,oneof"`
}

func (*SubscribeChatResponse_Message) isSubscribeChatResponse_Response() {}

func (*SubscribeChatResponse_Messages) isSubscribeChatResponse_Response() {}

// --> SubscribeCredentials
type SubscribeCredentialsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's session cookie
	Cookie        *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeCredentialsRequest) Reset() {
	*x = SubscribeCredentialsRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeCredentialsRequest) ProtoMessage() {}

func (x *SubscribeCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeCredentialsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{64}
}

func (x *SubscribeCredentialsRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

type CredentialResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Credential's ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Username
	Username *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Password
	Password *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// Realm
	Realm *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=realm,proto3" json:"realm,omitempty"`
	// Host
	Host *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	// Timestamp of credential's creation
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Note on credential
	Note *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
	// Note on color
	Color         *wrapperspb.UInt32Value `protobuf:"bytes,8,opt,name=color,proto3" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CredentialResponse) Reset() {
	*x = CredentialResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialResponse) ProtoMessage() {}

func (x *CredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialResponse.ProtoReflect.Descriptor instead.
func (*CredentialResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{65}
}

func (x *CredentialResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CredentialResponse) GetUsername() *wrapperspb.StringValue {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *CredentialResponse) GetPassword() *wrapperspb.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *CredentialResponse) GetRealm() *wrapperspb.StringValue {
	if x != nil {
		return x.Realm
	}
	return nil
}

func (x *CredentialResponse) GetHost() *wrapperspb.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *CredentialResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CredentialResponse) GetNote() *wrapperspb.StringValue {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *CredentialResponse) GetColor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Color
	}
	return nil
}

type CredentialsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of credentials
	Credentials   []*CredentialResponse `protobuf:"bytes,1,rep,name=credentials,proto3" json:"credentials,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CredentialsResponse) Reset() {
	*x = CredentialsResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialsResponse) ProtoMessage() {}

func (x *CredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialsResponse.ProtoReflect.Descriptor instead.
func (*CredentialsResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{66}
}

func (x *CredentialsResponse) GetCredentials() []*CredentialResponse {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type CredentialColorResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Credential's ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// New credential's color
	Color         *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CredentialColorResponse) Reset() {
	*x = CredentialColorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CredentialColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialColorResponse) ProtoMessage() {}

func (x *CredentialColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialColorResponse.ProtoReflect.Descriptor instead.
func (*CredentialColorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{67}
}

func (x *CredentialColorResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CredentialColorResponse) GetColor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Color
	}
	return nil
}

type CredentialNoteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Credential's ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// New credential's note
	Note          *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CredentialNoteResponse) Reset() {
	*x = CredentialNoteResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CredentialNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialNoteResponse) ProtoMessage() {}

func (x *CredentialNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialNoteResponse.ProtoReflect.Descriptor instead.
func (*CredentialNoteResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{68}
}

func (x *CredentialNoteResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CredentialNoteResponse) GetNote() *wrapperspb.StringValue {
	if x != nil {
		return x.Note
	}
	return nil
}

type SubscribeCredentialsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*SubscribeCredentialsResponse_Credential
	//	*SubscribeCredentialsResponse_Credentials
	//	*SubscribeCredentialsResponse_Color
	//	*SubscribeCredentialsResponse_Note
	Response      isSubscribeCredentialsResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeCredentialsResponse) Reset() {
	*x = SubscribeCredentialsResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeCredentialsResponse) ProtoMessage() {}

func (x *SubscribeCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeCredentialsResponse.ProtoReflect.Descriptor instead.
func (*SubscribeCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{69}
}

func (x *SubscribeCredentialsResponse) GetResponse() isSubscribeCredentialsResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *SubscribeCredentialsResponse) GetCredential() *CredentialResponse {
	if x != nil {
		if x, ok := x.Response.(*SubscribeCredentialsResponse_Credential); ok {
			return x.Credential
		}
	}
	return nil
}

func (x *SubscribeCredentialsResponse) GetCredentials() *CredentialsResponse {
	if x != nil {
		if x, ok := x.Response.(*SubscribeCredentialsResponse_Credentials); ok {
			return x.Credentials
		}
	}
	return nil
}

func (x *SubscribeCredentialsResponse) GetColor() *CredentialColorResponse {
	if x != nil {
		if x, ok := x.Response.(*SubscribeCredentialsResponse_Color); ok {
			return x.Color
		}
	}
	return nil
}

func (x *SubscribeCredentialsResponse) GetNote() *CredentialNoteResponse {
	if x != nil {
		if x, ok := x.Response.(*SubscribeCredentialsResponse_Note); ok {
			return x.Note
		}
	}
	return nil
}

type isSubscribeCredentialsResponse_Response interface {
	isSubscribeCredentialsResponse_Response()
}

type SubscribeCredentialsResponse_Credential struct {
	Credential *CredentialResponse `protobuf:"bytes,1,opt,name=credential,proto3,oneof"`
}

type SubscribeCredentialsResponse_Credentials struct {
	Credentials *CredentialsResponse `protobuf:"bytes,2,opt,name=credentials,proto3,oneof"`
}

type SubscribeCredentialsResponse_Color struct {
	Color *CredentialColorResponse `protobuf:"bytes,3,opt,name=color,proto3,oneof"`
}

type SubscribeCredentialsResponse_Note struct {
	Note *CredentialNoteResponse `protobuf:"bytes,4,opt,name=note,proto3,oneof"`
}

func (*SubscribeCredentialsResponse_Credential) isSubscribeCredentialsResponse_Response() {}

func (*SubscribeCredentialsResponse_Credentials) isSubscribeCredentialsResponse_Response() {}

func (*SubscribeCredentialsResponse_Color) isSubscribeCredentialsResponse_Response() {}

func (*SubscribeCredentialsResponse_Note) isSubscribeCredentialsResponse_Response() {}

// --> NewCommand
type NewCommandRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Operator's session cookie
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// Types that are valid to be assigned to Type:
	//
	//	*NewCommandRequest_Command
	//	*NewCommandRequest_Message
	//	*NewCommandRequest_Task
	Type          isNewCommandRequest_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewCommandRequest) Reset() {
	*x = NewCommandRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewCommandRequest) ProtoMessage() {}

func (x *NewCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewCommandRequest.ProtoReflect.Descriptor instead.
func (*NewCommandRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{70}
}

func (x *NewCommandRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *NewCommandRequest) GetType() isNewCommandRequest_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *NewCommandRequest) GetCommand() *CreateCommandRequest {
	if x != nil {
		if x, ok := x.Type.(*NewCommandRequest_Command); ok {
			return x.Command
		}
	}
	return nil
}

func (x *NewCommandRequest) GetMessage() *CreateMessageRequest {
	if x != nil {
		if x, ok := x.Type.(*NewCommandRequest_Message); ok {
			return x.Message
		}
	}
	return nil
}

func (x *NewCommandRequest) GetTask() *CreateTaskRequest {
	if x != nil {
		if x, ok := x.Type.(*NewCommandRequest_Task); ok {
			return x.Task
		}
	}
	return nil
}

type isNewCommandRequest_Type interface {
	isNewCommandRequest_Type()
}

type NewCommandRequest_Command struct {
	Command *CreateCommandRequest `protobuf:"bytes,2,opt,name=command,proto3,oneof"`
}

type NewCommandRequest_Message struct {
	Message *CreateMessageRequest `protobuf:"bytes,3,opt,name=message,proto3,oneof"`
}

type NewCommandRequest_Task struct {
	Task *CreateTaskRequest `protobuf:"bytes,4,opt,name=task,proto3,oneof"`
}

func (*NewCommandRequest_Command) isNewCommandRequest_Type() {}

func (*NewCommandRequest_Message) isNewCommandRequest_Type() {}

func (*NewCommandRequest_Task) isNewCommandRequest_Type() {}

type CreateCommandRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Ant's ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// [MANDATORY] String with command
	Cmd string `protobuf:"bytes,2,opt,name=cmd,proto3" json:"cmd,omitempty"`
	// [MANDATORY] Is command visible for other operators
	Visible       bool `protobuf:"varint,3,opt,name=visible,proto3" json:"visible,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCommandRequest) Reset() {
	*x = CreateCommandRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommandRequest) ProtoMessage() {}

func (x *CreateCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommandRequest.ProtoReflect.Descriptor instead.
func (*CreateCommandRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{71}
}

func (x *CreateCommandRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateCommandRequest) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *CreateCommandRequest) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

type CreateMessageRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Message type
	Type uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	// [MANDATORY] Message body
	Msg           string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMessageRequest) Reset() {
	*x = CreateMessageRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMessageRequest) ProtoMessage() {}

func (x *CreateMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMessageRequest.ProtoReflect.Descriptor instead.
func (*CreateMessageRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{72}
}

func (x *CreateMessageRequest) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CreateMessageRequest) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type CreateTaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Capability value
	Cap uint32 `protobuf:"varint,1,opt,name=cap,proto3" json:"cap,omitempty"`
	// Types that are valid to be assigned to Args:
	//
	//	*CreateTaskRequest_Sleep
	//	*CreateTaskRequest_Ls
	//	*CreateTaskRequest_Pwd
	//	*CreateTaskRequest_Cd
	//	*CreateTaskRequest_Whoami
	//	*CreateTaskRequest_Ps
	//	*CreateTaskRequest_Cat
	//	*CreateTaskRequest_Exec
	//	*CreateTaskRequest_Cp
	//	*CreateTaskRequest_Jobs
	//	*CreateTaskRequest_Jobkill
	//	*CreateTaskRequest_Kill
	//	*CreateTaskRequest_Mv
	//	*CreateTaskRequest_Mkdir
	//	*CreateTaskRequest_Rm
	//	*CreateTaskRequest_ExecAssembly
	//	*CreateTaskRequest_ShellcodeInjection
	//	*CreateTaskRequest_Download
	//	*CreateTaskRequest_Upload
	//	*CreateTaskRequest_Pause
	//	*CreateTaskRequest_Destruct
	//	*CreateTaskRequest_ExecDetach
	//	*CreateTaskRequest_Shell
	//	*CreateTaskRequest_Ppid
	//	*CreateTaskRequest_Exit
	Args          isCreateTaskRequest_Args `protobuf_oneof:"args"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTaskRequest) Reset() {
	*x = CreateTaskRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskRequest) ProtoMessage() {}

func (x *CreateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateTaskRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{73}
}

func (x *CreateTaskRequest) GetCap() uint32 {
	if x != nil {
		return x.Cap
	}
	return 0
}

func (x *CreateTaskRequest) GetArgs() isCreateTaskRequest_Args {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *CreateTaskRequest) GetSleep() *v1.CapSleep {
	if x != nil {
		if x, ok := x.Args.(*CreateTaskRequest_Sleep); ok {
			return x.Sleep
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetLs() *v1.CapLs {
	if x != nil {
		if x, ok := x.Args.(*CreateTaskRequest_Ls); ok {
			return x.Ls
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetPwd() *v1.CapPwd {
	if x != nil {
		if x, ok := x.Args.(*CreateTaskRequest_Pwd); ok {
			return x.Pwd
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetCd() *v1.CapCd {
	if x != nil {
		if x, ok := x.Args.(*CreateTaskRequest_Cd); ok {
			return x.Cd
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetWhoami() *v1.CapWhoami {
	if x != nil {
		if x, ok := x.Args.(*CreateTaskRequest_Whoami); ok {
			return x.Whoami
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetPs() *v1.CapPs {
	if x != nil {
		if x, ok := x.Args.(*CreateTaskRequest_Ps); ok {
			return x.Ps
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetCat() *v1.CapCat {
	if x != nil {
		if x, ok := x.Args.(*CreateTaskRequest_Cat); ok {
			return x.Cat
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetExec() *v1.CapExec {
	if x != nil {
		if x, ok := x.Args.(*CreateTaskRequest_Exec); ok {
			return x.Exec
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetCp() *v1.CapCp {
	if x != nil {
		if x, ok := x.Args.(*CreateTaskRequest_Cp); ok {
			return x.Cp
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetJobs() *v1.CapJobs {
	if x != nil {
		if x, ok := x.Args.(*CreateTaskRequest_Jobs); ok {
			return x.Jobs
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetJobkill() *v1.CapJobkill {
	if x != nil {
		if x, ok := x.Args.(*CreateTaskRequest_Jobkill); ok {
			return x.Jobkill
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetKill() *v1.CapKill {
	if x != nil {
		if x, ok := x.Args.(*CreateTaskRequest_Kill); ok {
			return x.Kill
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetMv() *v1.CapMv {
	if x != nil {
		if x, ok := x.Args.(*CreateTaskRequest_Mv); ok {
			return x.Mv
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetMkdir() *v1.CapMkdir {
	if x != nil {
		if x, ok := x.Args.(*CreateTaskRequest_Mkdir); ok {
			return x.Mkdir
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetRm() *v1.CapRm {
	if x != nil {
		if x, ok := x.Args.(*CreateTaskRequest_Rm); ok {
			return x.Rm
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetExecAssembly() *v1.CapExecAssembly {
	if x != nil {
		if x, ok := x.Args.(*CreateTaskRequest_ExecAssembly); ok {
			return x.ExecAssembly
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetShellcodeInjection() *v1.CapShellcodeInjection {
	if x != nil {
		if x, ok := x.Args.(*CreateTaskRequest_ShellcodeInjection); ok {
			return x.ShellcodeInjection
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetDownload() *v1.CapDownload {
	if x != nil {
		if x, ok := x.Args.(*CreateTaskRequest_Download); ok {
			return x.Download
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetUpload() *v1.CapUpload {
	if x != nil {
		if x, ok := x.Args.(*CreateTaskRequest_Upload); ok {
			return x.Upload
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetPause() *v1.CapPause {
	if x != nil {
		if x, ok := x.Args.(*CreateTaskRequest_Pause); ok {
			return x.Pause
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetDestruct() *v1.CapDestruct {
	if x != nil {
		if x, ok := x.Args.(*CreateTaskRequest_Destruct); ok {
			return x.Destruct
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetExecDetach() *v1.CapExecDetach {
	if x != nil {
		if x, ok := x.Args.(*CreateTaskRequest_ExecDetach); ok {
			return x.ExecDetach
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetShell() *v1.CapShell {
	if x != nil {
		if x, ok := x.Args.(*CreateTaskRequest_Shell); ok {
			return x.Shell
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetPpid() *v1.CapPpid {
	if x != nil {
		if x, ok := x.Args.(*CreateTaskRequest_Ppid); ok {
			return x.Ppid
		}
	}
	return nil
}

func (x *CreateTaskRequest) GetExit() *v1.CapExit {
	if x != nil {
		if x, ok := x.Args.(*CreateTaskRequest_Exit); ok {
			return x.Exit
		}
	}
	return nil
}

type isCreateTaskRequest_Args interface {
	isCreateTaskRequest_Args()
}

type CreateTaskRequest_Sleep struct {
	Sleep *v1.CapSleep `protobuf:"bytes,2,opt,name=sleep,proto3,oneof"`
}

type CreateTaskRequest_Ls struct {
	Ls *v1.CapLs `protobuf:"bytes,3,opt,name=ls,proto3,oneof"`
}

type CreateTaskRequest_Pwd struct {
	Pwd *v1.CapPwd `protobuf:"bytes,4,opt,name=pwd,proto3,oneof"`
}

type CreateTaskRequest_Cd struct {
	Cd *v1.CapCd `protobuf:"bytes,5,opt,name=cd,proto3,oneof"`
}

type CreateTaskRequest_Whoami struct {
	Whoami *v1.CapWhoami `protobuf:"bytes,6,opt,name=whoami,proto3,oneof"`
}

type CreateTaskRequest_Ps struct {
	Ps *v1.CapPs `protobuf:"bytes,7,opt,name=ps,proto3,oneof"`
}

type CreateTaskRequest_Cat struct {
	Cat *v1.CapCat `protobuf:"bytes,8,opt,name=cat,proto3,oneof"`
}

type CreateTaskRequest_Exec struct {
	Exec *v1.CapExec `protobuf:"bytes,9,opt,name=exec,proto3,oneof"`
}

type CreateTaskRequest_Cp struct {
	Cp *v1.CapCp `protobuf:"bytes,10,opt,name=cp,proto3,oneof"`
}

type CreateTaskRequest_Jobs struct {
	Jobs *v1.CapJobs `protobuf:"bytes,11,opt,name=jobs,proto3,oneof"`
}

type CreateTaskRequest_Jobkill struct {
	Jobkill *v1.CapJobkill `protobuf:"bytes,12,opt,name=jobkill,proto3,oneof"`
}

type CreateTaskRequest_Kill struct {
	Kill *v1.CapKill `protobuf:"bytes,13,opt,name=kill,proto3,oneof"`
}

type CreateTaskRequest_Mv struct {
	Mv *v1.CapMv `protobuf:"bytes,14,opt,name=mv,proto3,oneof"`
}

type CreateTaskRequest_Mkdir struct {
	Mkdir *v1.CapMkdir `protobuf:"bytes,15,opt,name=mkdir,proto3,oneof"`
}

type CreateTaskRequest_Rm struct {
	Rm *v1.CapRm `protobuf:"bytes,16,opt,name=rm,proto3,oneof"`
}

type CreateTaskRequest_ExecAssembly struct {
	ExecAssembly *v1.CapExecAssembly `protobuf:"bytes,17,opt,name=exec_assembly,json=execAssembly,proto3,oneof"`
}

type CreateTaskRequest_ShellcodeInjection struct {
	ShellcodeInjection *v1.CapShellcodeInjection `protobuf:"bytes,18,opt,name=shellcode_injection,json=shellcodeInjection,proto3,oneof"`
}

type CreateTaskRequest_Download struct {
	Download *v1.CapDownload `protobuf:"bytes,19,opt,name=download,proto3,oneof"`
}

type CreateTaskRequest_Upload struct {
	Upload *v1.CapUpload `protobuf:"bytes,20,opt,name=upload,proto3,oneof"`
}

type CreateTaskRequest_Pause struct {
	Pause *v1.CapPause `protobuf:"bytes,21,opt,name=pause,proto3,oneof"`
}

type CreateTaskRequest_Destruct struct {
	Destruct *v1.CapDestruct `protobuf:"bytes,22,opt,name=destruct,proto3,oneof"`
}

type CreateTaskRequest_ExecDetach struct {
	ExecDetach *v1.CapExecDetach `protobuf:"bytes,23,opt,name=exec_detach,json=execDetach,proto3,oneof"`
}

type CreateTaskRequest_Shell struct {
	Shell *v1.CapShell `protobuf:"bytes,24,opt,name=shell,proto3,oneof"`
}

type CreateTaskRequest_Ppid struct {
	Ppid *v1.CapPpid `protobuf:"bytes,25,opt,name=ppid,proto3,oneof"`
}

type CreateTaskRequest_Exit struct {
	Exit *v1.CapExit `protobuf:"bytes,26,opt,name=exit,proto3,oneof"`
}

func (*CreateTaskRequest_Sleep) isCreateTaskRequest_Args() {}

func (*CreateTaskRequest_Ls) isCreateTaskRequest_Args() {}

func (*CreateTaskRequest_Pwd) isCreateTaskRequest_Args() {}

func (*CreateTaskRequest_Cd) isCreateTaskRequest_Args() {}

func (*CreateTaskRequest_Whoami) isCreateTaskRequest_Args() {}

func (*CreateTaskRequest_Ps) isCreateTaskRequest_Args() {}

func (*CreateTaskRequest_Cat) isCreateTaskRequest_Args() {}

func (*CreateTaskRequest_Exec) isCreateTaskRequest_Args() {}

func (*CreateTaskRequest_Cp) isCreateTaskRequest_Args() {}

func (*CreateTaskRequest_Jobs) isCreateTaskRequest_Args() {}

func (*CreateTaskRequest_Jobkill) isCreateTaskRequest_Args() {}

func (*CreateTaskRequest_Kill) isCreateTaskRequest_Args() {}

func (*CreateTaskRequest_Mv) isCreateTaskRequest_Args() {}

func (*CreateTaskRequest_Mkdir) isCreateTaskRequest_Args() {}

func (*CreateTaskRequest_Rm) isCreateTaskRequest_Args() {}

func (*CreateTaskRequest_ExecAssembly) isCreateTaskRequest_Args() {}

func (*CreateTaskRequest_ShellcodeInjection) isCreateTaskRequest_Args() {}

func (*CreateTaskRequest_Download) isCreateTaskRequest_Args() {}

func (*CreateTaskRequest_Upload) isCreateTaskRequest_Args() {}

func (*CreateTaskRequest_Pause) isCreateTaskRequest_Args() {}

func (*CreateTaskRequest_Destruct) isCreateTaskRequest_Args() {}

func (*CreateTaskRequest_ExecDetach) isCreateTaskRequest_Args() {}

func (*CreateTaskRequest_Shell) isCreateTaskRequest_Args() {}

func (*CreateTaskRequest_Ppid) isCreateTaskRequest_Args() {}

func (*CreateTaskRequest_Exit) isCreateTaskRequest_Args() {}

type NewCommandResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewCommandResponse) Reset() {
	*x = NewCommandResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewCommandResponse) ProtoMessage() {}

func (x *NewCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewCommandResponse.ProtoReflect.Descriptor instead.
func (*NewCommandResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{74}
}

// --> SubscribeTasks
type SubscribeTasksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's session cookie
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// Types that are valid to be assigned to Type:
	//
	//	*SubscribeTasksRequest_Hello
	//	*SubscribeTasksRequest_Start
	//	*SubscribeTasksRequest_Stop
	Type          isSubscribeTasksRequest_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeTasksRequest) Reset() {
	*x = SubscribeTasksRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTasksRequest) ProtoMessage() {}

func (x *SubscribeTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTasksRequest.ProtoReflect.Descriptor instead.
func (*SubscribeTasksRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{75}
}

func (x *SubscribeTasksRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SubscribeTasksRequest) GetType() isSubscribeTasksRequest_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SubscribeTasksRequest) GetHello() *SubscribeTasksHelloRequest {
	if x != nil {
		if x, ok := x.Type.(*SubscribeTasksRequest_Hello); ok {
			return x.Hello
		}
	}
	return nil
}

func (x *SubscribeTasksRequest) GetStart() *StartPollAntRequest {
	if x != nil {
		if x, ok := x.Type.(*SubscribeTasksRequest_Start); ok {
			return x.Start
		}
	}
	return nil
}

func (x *SubscribeTasksRequest) GetStop() *StopPollAntRequest {
	if x != nil {
		if x, ok := x.Type.(*SubscribeTasksRequest_Stop); ok {
			return x.Stop
		}
	}
	return nil
}

type isSubscribeTasksRequest_Type interface {
	isSubscribeTasksRequest_Type()
}

type SubscribeTasksRequest_Hello struct {
	Hello *SubscribeTasksHelloRequest `protobuf:"bytes,2,opt,name=hello,proto3,oneof"`
}

type SubscribeTasksRequest_Start struct {
	Start *StartPollAntRequest `protobuf:"bytes,3,opt,name=start,proto3,oneof"`
}

type SubscribeTasksRequest_Stop struct {
	Stop *StopPollAntRequest `protobuf:"bytes,4,opt,name=stop,proto3,oneof"`
}

func (*SubscribeTasksRequest_Hello) isSubscribeTasksRequest_Type() {}

func (*SubscribeTasksRequest_Start) isSubscribeTasksRequest_Type() {}

func (*SubscribeTasksRequest_Stop) isSubscribeTasksRequest_Type() {}

type SubscribeTasksHelloRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeTasksHelloRequest) Reset() {
	*x = SubscribeTasksHelloRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeTasksHelloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTasksHelloRequest) ProtoMessage() {}

func (x *SubscribeTasksHelloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTasksHelloRequest.ProtoReflect.Descriptor instead.
func (*SubscribeTasksHelloRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{76}
}

type StartPollAntRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Ant's ID
	Id            uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartPollAntRequest) Reset() {
	*x = StartPollAntRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartPollAntRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartPollAntRequest) ProtoMessage() {}

func (x *StartPollAntRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartPollAntRequest.ProtoReflect.Descriptor instead.
func (*StartPollAntRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{77}
}

func (x *StartPollAntRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type StopPollAntRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Ant's ID
	Id            uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopPollAntRequest) Reset() {
	*x = StopPollAntRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopPollAntRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopPollAntRequest) ProtoMessage() {}

func (x *StopPollAntRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopPollAntRequest.ProtoReflect.Descriptor instead.
func (*StopPollAntRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{78}
}

func (x *StopPollAntRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CommandResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Command ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// [MANDATORY] Ant's ID
	Aid uint32 `protobuf:"varint,2,opt,name=aid,proto3" json:"aid,omitempty"`
	// [MANDATORY] String with command
	Cmd string `protobuf:"bytes,3,opt,name=cmd,proto3" json:"cmd,omitempty"`
	// [MANDATORY] Author of comman
	Author string `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	// [MANDATORY] Is comman visible for another operators
	Visible bool `protobuf:"varint,5,opt,name=visible,proto3" json:"visible,omitempty"`
	// [MANDATORY] Timestamp of command creation
	Created       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandResponse) Reset() {
	*x = CommandResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandResponse) ProtoMessage() {}

func (x *CommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandResponse.ProtoReflect.Descriptor instead.
func (*CommandResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{79}
}

func (x *CommandResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommandResponse) GetAid() uint32 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *CommandResponse) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *CommandResponse) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *CommandResponse) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *CommandResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type MessageResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Command ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// [MANDATORY] Message ID
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	// [MANDATORY] Ant's ID
	Aid uint32 `protobuf:"varint,3,opt,name=aid,proto3" json:"aid,omitempty"`
	// [MANDATORY] Type of message
	Type uint32 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	// [MANDATORY] Body of message
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	// [MANDATORY] Timestamp of message creation
	Created       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageResponse) Reset() {
	*x = MessageResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageResponse) ProtoMessage() {}

func (x *MessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageResponse.ProtoReflect.Descriptor instead.
func (*MessageResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{80}
}

func (x *MessageResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MessageResponse) GetMid() int64 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *MessageResponse) GetAid() uint32 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *MessageResponse) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MessageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MessageResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type TaskResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Command ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// [MANDATORY] Task ID
	Tid int64 `protobuf:"varint,2,opt,name=tid,proto3" json:"tid,omitempty"`
	// [MANDATORY] Ant's ID
	Aid uint32 `protobuf:"varint,3,opt,name=aid,proto3" json:"aid,omitempty"`
	// [MANDATORY] Status of task
	Status uint32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	// Task's output blob
	Output *wrapperspb.BytesValue `protobuf:"bytes,5,opt,name=output,proto3" json:"output,omitempty"`
	// [MANDATORY] Length of output blob
	OutputLen uint64 `protobuf:"varint,6,opt,name=output_len,json=outputLen,proto3" json:"output_len,omitempty"`
	// [MANDATORY] Is output blob big
	OutputBig bool `protobuf:"varint,7,opt,name=output_big,json=outputBig,proto3" json:"output_big,omitempty"`
	// [MANDATORY] Timestamp of task creation
	Created       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created,proto3" json:"created,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskResponse) Reset() {
	*x = TaskResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResponse) ProtoMessage() {}

func (x *TaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResponse.ProtoReflect.Descriptor instead.
func (*TaskResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{81}
}

func (x *TaskResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskResponse) GetTid() int64 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *TaskResponse) GetAid() uint32 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *TaskResponse) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TaskResponse) GetOutput() *wrapperspb.BytesValue {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *TaskResponse) GetOutputLen() uint64 {
	if x != nil {
		return x.OutputLen
	}
	return 0
}

func (x *TaskResponse) GetOutputBig() bool {
	if x != nil {
		return x.OutputBig
	}
	return false
}

func (x *TaskResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type TaskStatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Command ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// [MANDATORY] Task ID
	Tid int64 `protobuf:"varint,2,opt,name=tid,proto3" json:"tid,omitempty"`
	// [MANDATORY] Ant's ID
	Aid uint32 `protobuf:"varint,3,opt,name=aid,proto3" json:"aid,omitempty"`
	// [MANDATORY] Status of task
	Status        uint32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskStatusResponse) Reset() {
	*x = TaskStatusResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatusResponse) ProtoMessage() {}

func (x *TaskStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatusResponse.ProtoReflect.Descriptor instead.
func (*TaskStatusResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{82}
}

func (x *TaskStatusResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskStatusResponse) GetTid() int64 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *TaskStatusResponse) GetAid() uint32 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *TaskStatusResponse) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type TaskDoneResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Command ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// [MANDATORY] Task ID
	Tid int64 `protobuf:"varint,2,opt,name=tid,proto3" json:"tid,omitempty"`
	// [MANDATORY] Ant's ID
	Aid uint32 `protobuf:"varint,3,opt,name=aid,proto3" json:"aid,omitempty"`
	// [MANDATORY] Status of task
	Status uint32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	// Task's output blob
	Output *wrapperspb.BytesValue `protobuf:"bytes,5,opt,name=output,proto3" json:"output,omitempty"`
	// [MANDATORY] Length of output blob
	OutputLen uint64 `protobuf:"varint,6,opt,name=output_len,json=outputLen,proto3" json:"output_len,omitempty"`
	// [MANDATORY] Is output blob big
	OutputBig     bool `protobuf:"varint,7,opt,name=output_big,json=outputBig,proto3" json:"output_big,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskDoneResponse) Reset() {
	*x = TaskDoneResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskDoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDoneResponse) ProtoMessage() {}

func (x *TaskDoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDoneResponse.ProtoReflect.Descriptor instead.
func (*TaskDoneResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{83}
}

func (x *TaskDoneResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskDoneResponse) GetTid() int64 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *TaskDoneResponse) GetAid() uint32 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *TaskDoneResponse) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TaskDoneResponse) GetOutput() *wrapperspb.BytesValue {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *TaskDoneResponse) GetOutputLen() uint64 {
	if x != nil {
		return x.OutputLen
	}
	return 0
}

func (x *TaskDoneResponse) GetOutputBig() bool {
	if x != nil {
		return x.OutputBig
	}
	return false
}

type SubscribeTasksResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*SubscribeTasksResponse_Command
	//	*SubscribeTasksResponse_Message
	//	*SubscribeTasksResponse_Task
	//	*SubscribeTasksResponse_TaskStatus
	//	*SubscribeTasksResponse_TaskDone
	Type          isSubscribeTasksResponse_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeTasksResponse) Reset() {
	*x = SubscribeTasksResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTasksResponse) ProtoMessage() {}

func (x *SubscribeTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTasksResponse.ProtoReflect.Descriptor instead.
func (*SubscribeTasksResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{84}
}

func (x *SubscribeTasksResponse) GetType() isSubscribeTasksResponse_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SubscribeTasksResponse) GetCommand() *CommandResponse {
	if x != nil {
		if x, ok := x.Type.(*SubscribeTasksResponse_Command); ok {
			return x.Command
		}
	}
	return nil
}

func (x *SubscribeTasksResponse) GetMessage() *MessageResponse {
	if x != nil {
		if x, ok := x.Type.(*SubscribeTasksResponse_Message); ok {
			return x.Message
		}
	}
	return nil
}

func (x *SubscribeTasksResponse) GetTask() *TaskResponse {
	if x != nil {
		if x, ok := x.Type.(*SubscribeTasksResponse_Task); ok {
			return x.Task
		}
	}
	return nil
}

func (x *SubscribeTasksResponse) GetTaskStatus() *TaskStatusResponse {
	if x != nil {
		if x, ok := x.Type.(*SubscribeTasksResponse_TaskStatus); ok {
			return x.TaskStatus
		}
	}
	return nil
}

func (x *SubscribeTasksResponse) GetTaskDone() *TaskDoneResponse {
	if x != nil {
		if x, ok := x.Type.(*SubscribeTasksResponse_TaskDone); ok {
			return x.TaskDone
		}
	}
	return nil
}

type isSubscribeTasksResponse_Type interface {
	isSubscribeTasksResponse_Type()
}

type SubscribeTasksResponse_Command struct {
	Command *CommandResponse `protobuf:"bytes,1,opt,name=command,proto3,oneof"`
}

type SubscribeTasksResponse_Message struct {
	Message *MessageResponse `protobuf:"bytes,2,opt,name=message,proto3,oneof"`
}

type SubscribeTasksResponse_Task struct {
	Task *TaskResponse `protobuf:"bytes,3,opt,name=task,proto3,oneof"`
}

type SubscribeTasksResponse_TaskStatus struct {
	TaskStatus *TaskStatusResponse `protobuf:"bytes,4,opt,name=task_status,json=taskStatus,proto3,oneof"`
}

type SubscribeTasksResponse_TaskDone struct {
	TaskDone *TaskDoneResponse `protobuf:"bytes,5,opt,name=task_done,json=taskDone,proto3,oneof"`
}

func (*SubscribeTasksResponse_Command) isSubscribeTasksResponse_Type() {}

func (*SubscribeTasksResponse_Message) isSubscribeTasksResponse_Type() {}

func (*SubscribeTasksResponse_Task) isSubscribeTasksResponse_Type() {}

func (*SubscribeTasksResponse_TaskStatus) isSubscribeTasksResponse_Type() {}

func (*SubscribeTasksResponse_TaskDone) isSubscribeTasksResponse_Type() {}

// --> GetTaskOutput
type GetTaskOutputRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [MANDATORY] Operator's session cookie
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [MANDATORY] Task ID
	Id            int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskOutputRequest) Reset() {
	*x = GetTaskOutputRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskOutputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskOutputRequest) ProtoMessage() {}

func (x *GetTaskOutputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskOutputRequest.ProtoReflect.Descriptor instead.
func (*GetTaskOutputRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{85}
}

func (x *GetTaskOutputRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *GetTaskOutputRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetTaskOutputResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Task's output blob
	Output *wrapperspb.BytesValue `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	// [MANDATORY] Length of output blob
	OutputLen     uint64 `protobuf:"varint,6,opt,name=output_len,json=outputLen,proto3" json:"output_len,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskOutputResponse) Reset() {
	*x = GetTaskOutputResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskOutputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskOutputResponse) ProtoMessage() {}

func (x *GetTaskOutputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskOutputResponse.ProtoReflect.Descriptor instead.
func (*GetTaskOutputResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{86}
}

func (x *GetTaskOutputResponse) GetOutput() *wrapperspb.BytesValue {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *GetTaskOutputResponse) GetOutputLen() uint64 {
	if x != nil {
		return x.OutputLen
	}
	return 0
}

var File_operator_v1_operator_proto protoreflect.FileDescriptor

var file_operator_v1_operator_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x25, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x58, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06,
	0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x15, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x1c,
	0x0a, 0x1a, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x0a, 0x18,
	0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x22, 0x1b, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x01,
	0x0a, 0x1a, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06,
	0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x1d, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52,
	0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x1c, 0x0a, 0x1a, 0x53,
	0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa4, 0x02, 0x0a, 0x14, 0x4e, 0x65,
	0x77, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06,
	0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x65,
	0x61, 0x6c, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x12, 0x30,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x22, 0x17, 0x0a, 0x15, 0x4e, 0x65, 0x77, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x65, 0x0a, 0x15, 0x4e, 0x65, 0x77,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06,
	0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x18, 0x0a, 0x16, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x18, 0x53,
	0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x1b, 0x0a,
	0x19, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x17, 0x53,
	0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x65,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x6e, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x74, 0x73, 0x4e, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x74, 0x73, 0x4e, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x0a, 0x11, 0x53, 0x65,
	0x74, 0x41, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x41, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f, 0x01,
	0x0a, 0x13, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22,
	0x16, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x41,
	0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x74,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73, 0x0a,
	0x17, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x4e, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94,
	0x01, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x28, 0x0a, 0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x93, 0x01, 0x0a,
	0x11, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x73,
	0x68, 0x61, 0x6b, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4f, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x22, 0xca, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x02, 0x69, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x22, 0x50,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73,
	0x22, 0x5b, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x58, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x30, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x56, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x61,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x22, 0x8c, 0x03, 0x0a, 0x1a, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x0a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x0a, 0x14, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x22, 0xcf, 0x06, 0x0a, 0x0b, 0x41, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6c, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x5f, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x78, 0x74, 0x49, 0x70, 0x12, 0x33, 0x0a, 0x06,
	0x69, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x49,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x6f,
	0x73, 0x12, 0x35, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x6f, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x12, 0x39,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x70, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x6c,
	0x65, 0x65, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x61, 0x70, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x61, 0x70, 0x73, 0x12,
	0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x22, 0x3c, 0x0a, 0x0c, 0x41, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x04, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x56, 0x0a, 0x10, 0x41, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x53, 0x0a,
	0x0f, 0x41, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x22, 0x51, 0x0a, 0x0f, 0x41, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x6c, 0x61, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x10, 0x41, 0x6e, 0x74, 0x53, 0x6c, 0x65, 0x65,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x65,
	0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x22, 0xd8, 0x02, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6e, 0x74, 0x12,
	0x2f, 0x0a, 0x04, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x61, 0x6e, 0x74, 0x73,
	0x12, 0x35, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e,
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x6c,
	0x61, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x74,
	0x53, 0x6c, 0x65, 0x65, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x4f, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x62, 0x0a, 0x14, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x22, 0x67,
	0x0a, 0x15, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x9a, 0x02, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06,
	0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x22, 0xb2, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x4d, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x51, 0x0a, 0x1b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x22, 0x9f, 0x03, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x32, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x72,
	0x65, 0x61, 0x6c, 0x6d, 0x12, 0x30, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x58, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x22, 0x5d, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x22, 0x5a, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0xac, 0x02, 0x0a,
	0x1c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x44, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x83, 0x02, 0x0a, 0x11,
	0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x52, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x3c, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x22, 0xad, 0x09, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x61, 0x70, 0x12, 0x2b, 0x0a, 0x05, 0x73,
	0x6c, 0x65, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x22, 0x0a, 0x02, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x70, 0x4c, 0x73, 0x48, 0x00, 0x52, 0x02, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x03,
	0x70, 0x77, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x50, 0x77, 0x64, 0x48, 0x00, 0x52, 0x03,
	0x70, 0x77, 0x64, 0x12, 0x22, 0x0a, 0x02, 0x63, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x43,
	0x64, 0x48, 0x00, 0x52, 0x02, 0x63, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x77, 0x68, 0x6f, 0x61, 0x6d,
	0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x57, 0x68, 0x6f, 0x61, 0x6d, 0x69, 0x48, 0x00, 0x52,
	0x06, 0x77, 0x68, 0x6f, 0x61, 0x6d, 0x69, 0x12, 0x22, 0x0a, 0x02, 0x70, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x70, 0x50, 0x73, 0x48, 0x00, 0x52, 0x02, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x03, 0x63,
	0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x43, 0x61, 0x74, 0x48, 0x00, 0x52, 0x03, 0x63,
	0x61, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x65, 0x78, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70,
	0x45, 0x78, 0x65, 0x63, 0x48, 0x00, 0x52, 0x04, 0x65, 0x78, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x02,
	0x63, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x43, 0x70, 0x48, 0x00, 0x52, 0x02, 0x63, 0x70,
	0x12, 0x28, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x4a, 0x6f,
	0x62, 0x73, 0x48, 0x00, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x6a, 0x6f,
	0x62, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x4a, 0x6f, 0x62, 0x6b, 0x69,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x28, 0x0a,
	0x04, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x4b, 0x69, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x04, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x02, 0x6d, 0x76, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x70, 0x4d, 0x76, 0x48, 0x00, 0x52, 0x02, 0x6d, 0x76, 0x12, 0x2b, 0x0a, 0x05, 0x6d,
	0x6b, 0x64, 0x69, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x48,
	0x00, 0x52, 0x05, 0x6d, 0x6b, 0x64, 0x69, 0x72, 0x12, 0x22, 0x0a, 0x02, 0x72, 0x6d, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x70, 0x52, 0x6d, 0x48, 0x00, 0x52, 0x02, 0x72, 0x6d, 0x12, 0x41, 0x0a, 0x0d,
	0x65, 0x78, 0x65, 0x63, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x70, 0x45, 0x78, 0x65, 0x63, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x48,
	0x00, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x12,
	0x53, 0x0a, 0x13, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x68, 0x65, 0x6c,
	0x6c, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x12, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00,
	0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x50, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x70, 0x61, 0x75, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x3b, 0x0a,
	0x0b, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x70, 0x45, 0x78, 0x65, 0x63, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0a,
	0x65, 0x78, 0x65, 0x63, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x68,
	0x65, 0x6c, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x05, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x70, 0x69, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x70, 0x50, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x04, 0x70, 0x70, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x04, 0x65, 0x78, 0x69, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x45,
	0x78, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x65, 0x78, 0x69, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x85, 0x02, 0x0a, 0x15, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52,
	0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x41,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x50, 0x6f, 0x6c, 0x6c, 0x41, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x25, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x41, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x6f,
	0x6c, 0x6c, 0x41, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0xad, 0x01, 0x0a,
	0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xa9, 0x01, 0x0a,
	0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x61, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x83, 0x02, 0x0a, 0x0c, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x62, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x60,
	0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xd1, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x33, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x4c, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x62, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x42, 0x69, 0x67, 0x22, 0xc7, 0x02, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x74, 0x61, 0x73, 0x6b, 0x12, 0x42, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5a,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6b, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x4c, 0x65, 0x6e, 0x32, 0x82, 0x13, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x48,
	0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65,
	0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x67, 0x0a,
	0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x58, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x41, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x41, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x67, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x58, 0x0a, 0x0d, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x21, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x6d, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x28, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x5d, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x5f, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x74, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x41, 0x6e,
	0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x74, 0x73, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a,
	0x53, 0x65, 0x74, 0x41, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x74, 0x4e,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x74, 0x4e,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x53,
	0x65, 0x74, 0x41, 0x6e, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x74, 0x73,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x74,
	0x73, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a,
	0x10, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62,
	0x0a, 0x11, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a,
	0x0d, 0x4e, 0x65, 0x77, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x21,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x77, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x26, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x13,
	0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x12, 0x53, 0x65,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x4e, 0x6f, 0x74, 0x65,
	0x12, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x4e, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65,
	0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65,
	0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x28, 0x01, 0x12, 0x50, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x12, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x43, 0x5a, 0x41,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x69, 0x63, 0x6f, 0x54,
	0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x70, 0x69, 0x63, 0x6f, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_operator_v1_operator_proto_rawDescOnce sync.Once
	file_operator_v1_operator_proto_rawDescData = file_operator_v1_operator_proto_rawDesc
)

func file_operator_v1_operator_proto_rawDescGZIP() []byte {
	file_operator_v1_operator_proto_rawDescOnce.Do(func() {
		file_operator_v1_operator_proto_rawDescData = protoimpl.X.CompressGZIP(file_operator_v1_operator_proto_rawDescData)
	})
	return file_operator_v1_operator_proto_rawDescData
}

var file_operator_v1_operator_proto_msgTypes = make([]protoimpl.MessageInfo, 87)
var file_operator_v1_operator_proto_goTypes = []any{
	(*SessionCookie)(nil),                // 0: operator.v1.SessionCookie
	(*CancelTasksRequest)(nil),           // 1: operator.v1.CancelTasksRequest
	(*CancelTasksResponse)(nil),          // 2: operator.v1.CancelTasksResponse
	(*SetCredentialsNoteRequest)(nil),    // 3: operator.v1.SetCredentialsNoteRequest
	(*SetCredentialsNoteResponse)(nil),   // 4: operator.v1.SetCredentialsNoteResponse
	(*SetCredentialNoteRequest)(nil),     // 5: operator.v1.SetCredentialNoteRequest
	(*SetCredentialNoteResponse)(nil),    // 6: operator.v1.SetCredentialNoteResponse
	(*SetCredentialsColorRequest)(nil),   // 7: operator.v1.SetCredentialsColorRequest
	(*SetCredentialsColorResponse)(nil),  // 8: operator.v1.SetCredentialsColorResponse
	(*SetCredentialColorRequest)(nil),    // 9: operator.v1.SetCredentialColorRequest
	(*SetCredentialColorResponse)(nil),   // 10: operator.v1.SetCredentialColorResponse
	(*NewCredentialRequest)(nil),         // 11: operator.v1.NewCredentialRequest
	(*NewCredentialResponse)(nil),        // 12: operator.v1.NewCredentialResponse
	(*NewChatMessageRequest)(nil),        // 13: operator.v1.NewChatMessageRequest
	(*NewChatMessageResponse)(nil),       // 14: operator.v1.NewChatMessageResponse
	(*SetOperatorsColorRequest)(nil),     // 15: operator.v1.SetOperatorsColorRequest
	(*SetOperatorsColorResponse)(nil),    // 16: operator.v1.SetOperatorsColorResponse
	(*SetOperatorColorRequest)(nil),      // 17: operator.v1.SetOperatorColorRequest
	(*SetOperatorColorResponse)(nil),     // 18: operator.v1.SetOperatorColorResponse
	(*SetListenerNoteRequest)(nil),       // 19: operator.v1.SetListenerNoteRequest
	(*SetListenerNoteResponse)(nil),      // 20: operator.v1.SetListenerNoteResponse
	(*SetAntsNoteRequest)(nil),           // 21: operator.v1.SetAntsNoteRequest
	(*SetAntsNoteResponse)(nil),          // 22: operator.v1.SetAntsNoteResponse
	(*SetAntNoteRequest)(nil),            // 23: operator.v1.SetAntNoteRequest
	(*SetAntNoteResponse)(nil),           // 24: operator.v1.SetAntNoteResponse
	(*SetAntsColorRequest)(nil),          // 25: operator.v1.SetAntsColorRequest
	(*SetAntsColorResponse)(nil),         // 26: operator.v1.SetAntsColorResponse
	(*SetAntColorRequest)(nil),           // 27: operator.v1.SetAntColorRequest
	(*SetAntColorResponse)(nil),          // 28: operator.v1.SetAntColorResponse
	(*SetListenersNoteRequest)(nil),      // 29: operator.v1.SetListenersNoteRequest
	(*SetListenersNoteResponse)(nil),     // 30: operator.v1.SetListenersNoteResponse
	(*SetListenersColorRequest)(nil),     // 31: operator.v1.SetListenersColorRequest
	(*SetListenersColorResponse)(nil),    // 32: operator.v1.SetListenersColorResponse
	(*SetListenerColorRequest)(nil),      // 33: operator.v1.SetListenerColorRequest
	(*SetListenerColorResponse)(nil),     // 34: operator.v1.SetListenerColorResponse
	(*HelloRequest)(nil),                 // 35: operator.v1.HelloRequest
	(*HandshakeResponse)(nil),            // 36: operator.v1.HandshakeResponse
	(*HelloResponse)(nil),                // 37: operator.v1.HelloResponse
	(*SubscribeListenersRequest)(nil),    // 38: operator.v1.SubscribeListenersRequest
	(*ListenerResponse)(nil),             // 39: operator.v1.ListenerResponse
	(*ListenersResponse)(nil),            // 40: operator.v1.ListenersResponse
	(*ListenerColorResponse)(nil),        // 41: operator.v1.ListenerColorResponse
	(*ListenerNoteResponse)(nil),         // 42: operator.v1.ListenerNoteResponse
	(*ListenerInfoResponse)(nil),         // 43: operator.v1.ListenerInfoResponse
	(*ListenerLastResponse)(nil),         // 44: operator.v1.ListenerLastResponse
	(*SubscribeListenersResponse)(nil),   // 45: operator.v1.SubscribeListenersResponse
	(*SubscribeAntsRequest)(nil),         // 46: operator.v1.SubscribeAntsRequest
	(*AntResponse)(nil),                  // 47: operator.v1.AntResponse
	(*AntsResponse)(nil),                 // 48: operator.v1.AntsResponse
	(*AntColorResponse)(nil),             // 49: operator.v1.AntColorResponse
	(*AntNoteResponse)(nil),              // 50: operator.v1.AntNoteResponse
	(*AntLastResponse)(nil),              // 51: operator.v1.AntLastResponse
	(*AntSleepResponse)(nil),             // 52: operator.v1.AntSleepResponse
	(*SubscribeAntsResponse)(nil),        // 53: operator.v1.SubscribeAntsResponse
	(*SubscribeOperatorsRequest)(nil),    // 54: operator.v1.SubscribeOperatorsRequest
	(*OperatorResponse)(nil),             // 55: operator.v1.OperatorResponse
	(*OperatorsResponse)(nil),            // 56: operator.v1.OperatorsResponse
	(*OperatorLastResponse)(nil),         // 57: operator.v1.OperatorLastResponse
	(*OperatorColorResponse)(nil),        // 58: operator.v1.OperatorColorResponse
	(*SubscribeOperatorsResponse)(nil),   // 59: operator.v1.SubscribeOperatorsResponse
	(*SubscribeChatRequest)(nil),         // 60: operator.v1.SubscribeChatRequest
	(*ChatResponse)(nil),                 // 61: operator.v1.ChatResponse
	(*ChatMessagesResponse)(nil),         // 62: operator.v1.ChatMessagesResponse
	(*SubscribeChatResponse)(nil),        // 63: operator.v1.SubscribeChatResponse
	(*SubscribeCredentialsRequest)(nil),  // 64: operator.v1.SubscribeCredentialsRequest
	(*CredentialResponse)(nil),           // 65: operator.v1.CredentialResponse
	(*CredentialsResponse)(nil),          // 66: operator.v1.CredentialsResponse
	(*CredentialColorResponse)(nil),      // 67: operator.v1.CredentialColorResponse
	(*CredentialNoteResponse)(nil),       // 68: operator.v1.CredentialNoteResponse
	(*SubscribeCredentialsResponse)(nil), // 69: operator.v1.SubscribeCredentialsResponse
	(*NewCommandRequest)(nil),            // 70: operator.v1.NewCommandRequest
	(*CreateCommandRequest)(nil),         // 71: operator.v1.CreateCommandRequest
	(*CreateMessageRequest)(nil),         // 72: operator.v1.CreateMessageRequest
	(*CreateTaskRequest)(nil),            // 73: operator.v1.CreateTaskRequest
	(*NewCommandResponse)(nil),           // 74: operator.v1.NewCommandResponse
	(*SubscribeTasksRequest)(nil),        // 75: operator.v1.SubscribeTasksRequest
	(*SubscribeTasksHelloRequest)(nil),   // 76: operator.v1.SubscribeTasksHelloRequest
	(*StartPollAntRequest)(nil),          // 77: operator.v1.StartPollAntRequest
	(*StopPollAntRequest)(nil),           // 78: operator.v1.StopPollAntRequest
	(*CommandResponse)(nil),              // 79: operator.v1.CommandResponse
	(*MessageResponse)(nil),              // 80: operator.v1.MessageResponse
	(*TaskResponse)(nil),                 // 81: operator.v1.TaskResponse
	(*TaskStatusResponse)(nil),           // 82: operator.v1.TaskStatusResponse
	(*TaskDoneResponse)(nil),             // 83: operator.v1.TaskDoneResponse
	(*SubscribeTasksResponse)(nil),       // 84: operator.v1.SubscribeTasksResponse
	(*GetTaskOutputRequest)(nil),         // 85: operator.v1.GetTaskOutputRequest
	(*GetTaskOutputResponse)(nil),        // 86: operator.v1.GetTaskOutputResponse
	(*wrapperspb.UInt32Value)(nil),       // 87: google.protobuf.UInt32Value
	(*wrapperspb.StringValue)(nil),       // 88: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),        // 89: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                // 90: google.protobuf.Empty
	(*wrapperspb.BoolValue)(nil),         // 91: google.protobuf.BoolValue
	(*wrapperspb.UInt64Value)(nil),       // 92: google.protobuf.UInt64Value
	(*v1.CapSleep)(nil),                  // 93: common.v1.CapSleep
	(*v1.CapLs)(nil),                     // 94: common.v1.CapLs
	(*v1.CapPwd)(nil),                    // 95: common.v1.CapPwd
	(*v1.CapCd)(nil),                     // 96: common.v1.CapCd
	(*v1.CapWhoami)(nil),                 // 97: common.v1.CapWhoami
	(*v1.CapPs)(nil),                     // 98: common.v1.CapPs
	(*v1.CapCat)(nil),                    // 99: common.v1.CapCat
	(*v1.CapExec)(nil),                   // 100: common.v1.CapExec
	(*v1.CapCp)(nil),                     // 101: common.v1.CapCp
	(*v1.CapJobs)(nil),                   // 102: common.v1.CapJobs
	(*v1.CapJobkill)(nil),                // 103: common.v1.CapJobkill
	(*v1.CapKill)(nil),                   // 104: common.v1.CapKill
	(*v1.CapMv)(nil),                     // 105: common.v1.CapMv
	(*v1.CapMkdir)(nil),                  // 106: common.v1.CapMkdir
	(*v1.CapRm)(nil),                     // 107: common.v1.CapRm
	(*v1.CapExecAssembly)(nil),           // 108: common.v1.CapExecAssembly
	(*v1.CapShellcodeInjection)(nil),     // 109: common.v1.CapShellcodeInjection
	(*v1.CapDownload)(nil),               // 110: common.v1.CapDownload
	(*v1.CapUpload)(nil),                 // 111: common.v1.CapUpload
	(*v1.CapPause)(nil),                  // 112: common.v1.CapPause
	(*v1.CapDestruct)(nil),               // 113: common.v1.CapDestruct
	(*v1.CapExecDetach)(nil),             // 114: common.v1.CapExecDetach
	(*v1.CapShell)(nil),                  // 115: common.v1.CapShell
	(*v1.CapPpid)(nil),                   // 116: common.v1.CapPpid
	(*v1.CapExit)(nil),                   // 117: common.v1.CapExit
	(*wrapperspb.BytesValue)(nil),        // 118: google.protobuf.BytesValue
}
var file_operator_v1_operator_proto_depIdxs = []int32{
	0,   // 0: operator.v1.CancelTasksRequest.cookie:type_name -> operator.v1.SessionCookie
	0,   // 1: operator.v1.SetCredentialsNoteRequest.cookie:type_name -> operator.v1.SessionCookie
	0,   // 2: operator.v1.SetCredentialNoteRequest.cookie:type_name -> operator.v1.SessionCookie
	0,   // 3: operator.v1.SetCredentialsColorRequest.cookie:type_name -> operator.v1.SessionCookie
	87,  // 4: operator.v1.SetCredentialsColorRequest.color:type_name -> google.protobuf.UInt32Value
	0,   // 5: operator.v1.SetCredentialColorRequest.cookie:type_name -> operator.v1.SessionCookie
	87,  // 6: operator.v1.SetCredentialColorRequest.color:type_name -> google.protobuf.UInt32Value
	0,   // 7: operator.v1.NewCredentialRequest.cookie:type_name -> operator.v1.SessionCookie
	88,  // 8: operator.v1.NewCredentialRequest.username:type_name -> google.protobuf.StringValue
	88,  // 9: operator.v1.NewCredentialRequest.password:type_name -> google.protobuf.StringValue
	88,  // 10: operator.v1.NewCredentialRequest.realm:type_name -> google.protobuf.StringValue
	88,  // 11: operator.v1.NewCredentialRequest.host:type_name -> google.protobuf.StringValue
	0,   // 12: operator.v1.NewChatMessageRequest.cookie:type_name -> operator.v1.SessionCookie
	0,   // 13: operator.v1.SetOperatorsColorRequest.cookie:type_name -> operator.v1.SessionCookie
	87,  // 14: operator.v1.SetOperatorsColorRequest.color:type_name -> google.protobuf.UInt32Value
	0,   // 15: operator.v1.SetOperatorColorRequest.cookie:type_name -> operator.v1.SessionCookie
	87,  // 16: operator.v1.SetOperatorColorRequest.color:type_name -> google.protobuf.UInt32Value
	0,   // 17: operator.v1.SetListenerNoteRequest.cookie:type_name -> operator.v1.SessionCookie
	0,   // 18: operator.v1.SetAntsNoteRequest.cookie:type_name -> operator.v1.SessionCookie
	0,   // 19: operator.v1.SetAntNoteRequest.cookie:type_name -> operator.v1.SessionCookie
	0,   // 20: operator.v1.SetAntsColorRequest.cookie:type_name -> operator.v1.SessionCookie
	87,  // 21: operator.v1.SetAntsColorRequest.color:type_name -> google.protobuf.UInt32Value
	0,   // 22: operator.v1.SetAntColorRequest.cookie:type_name -> operator.v1.SessionCookie
	87,  // 23: operator.v1.SetAntColorRequest.color:type_name -> google.protobuf.UInt32Value
	0,   // 24: operator.v1.SetListenersNoteRequest.cookie:type_name -> operator.v1.SessionCookie
	0,   // 25: operator.v1.SetListenersColorRequest.cookie:type_name -> operator.v1.SessionCookie
	87,  // 26: operator.v1.SetListenersColorRequest.color:type_name -> google.protobuf.UInt32Value
	0,   // 27: operator.v1.SetListenerColorRequest.cookie:type_name -> operator.v1.SessionCookie
	87,  // 28: operator.v1.SetListenerColorRequest.color:type_name -> google.protobuf.UInt32Value
	89,  // 29: operator.v1.HandshakeResponse.time:type_name -> google.protobuf.Timestamp
	0,   // 30: operator.v1.HandshakeResponse.cookie:type_name -> operator.v1.SessionCookie
	36,  // 31: operator.v1.HelloResponse.handshake:type_name -> operator.v1.HandshakeResponse
	90,  // 32: operator.v1.HelloResponse.empty:type_name -> google.protobuf.Empty
	0,   // 33: operator.v1.SubscribeListenersRequest.cookie:type_name -> operator.v1.SessionCookie
	88,  // 34: operator.v1.ListenerResponse.name:type_name -> google.protobuf.StringValue
	88,  // 35: operator.v1.ListenerResponse.ip:type_name -> google.protobuf.StringValue
	87,  // 36: operator.v1.ListenerResponse.port:type_name -> google.protobuf.UInt32Value
	87,  // 37: operator.v1.ListenerResponse.color:type_name -> google.protobuf.UInt32Value
	88,  // 38: operator.v1.ListenerResponse.note:type_name -> google.protobuf.StringValue
	89,  // 39: operator.v1.ListenerResponse.last:type_name -> google.protobuf.Timestamp
	39,  // 40: operator.v1.ListenersResponse.listeners:type_name -> operator.v1.ListenerResponse
	87,  // 41: operator.v1.ListenerColorResponse.color:type_name -> google.protobuf.UInt32Value
	88,  // 42: operator.v1.ListenerNoteResponse.note:type_name -> google.protobuf.StringValue
	88,  // 43: operator.v1.ListenerInfoResponse.name:type_name -> google.protobuf.StringValue
	88,  // 44: operator.v1.ListenerInfoResponse.ip:type_name -> google.protobuf.StringValue
	87,  // 45: operator.v1.ListenerInfoResponse.port:type_name -> google.protobuf.UInt32Value
	89,  // 46: operator.v1.ListenerLastResponse.last:type_name -> google.protobuf.Timestamp
	39,  // 47: operator.v1.SubscribeListenersResponse.listener:type_name -> operator.v1.ListenerResponse
	40,  // 48: operator.v1.SubscribeListenersResponse.listeners:type_name -> operator.v1.ListenersResponse
	41,  // 49: operator.v1.SubscribeListenersResponse.color:type_name -> operator.v1.ListenerColorResponse
	42,  // 50: operator.v1.SubscribeListenersResponse.note:type_name -> operator.v1.ListenerNoteResponse
	43,  // 51: operator.v1.SubscribeListenersResponse.info:type_name -> operator.v1.ListenerInfoResponse
	44,  // 52: operator.v1.SubscribeListenersResponse.last:type_name -> operator.v1.ListenerLastResponse
	0,   // 53: operator.v1.SubscribeAntsRequest.cookie:type_name -> operator.v1.SessionCookie
	88,  // 54: operator.v1.AntResponse.ext_ip:type_name -> google.protobuf.StringValue
	88,  // 55: operator.v1.AntResponse.int_ip:type_name -> google.protobuf.StringValue
	88,  // 56: operator.v1.AntResponse.os_meta:type_name -> google.protobuf.StringValue
	88,  // 57: operator.v1.AntResponse.hostname:type_name -> google.protobuf.StringValue
	88,  // 58: operator.v1.AntResponse.username:type_name -> google.protobuf.StringValue
	88,  // 59: operator.v1.AntResponse.domain:type_name -> google.protobuf.StringValue
	91,  // 60: operator.v1.AntResponse.privileged:type_name -> google.protobuf.BoolValue
	88,  // 61: operator.v1.AntResponse.proc_name:type_name -> google.protobuf.StringValue
	92,  // 62: operator.v1.AntResponse.pid:type_name -> google.protobuf.UInt64Value
	87,  // 63: operator.v1.AntResponse.color:type_name -> google.protobuf.UInt32Value
	88,  // 64: operator.v1.AntResponse.note:type_name -> google.protobuf.StringValue
	89,  // 65: operator.v1.AntResponse.first:type_name -> google.protobuf.Timestamp
	89,  // 66: operator.v1.AntResponse.last:type_name -> google.protobuf.Timestamp
	47,  // 67: operator.v1.AntsResponse.ants:type_name -> operator.v1.AntResponse
	87,  // 68: operator.v1.AntColorResponse.color:type_name -> google.protobuf.UInt32Value
	88,  // 69: operator.v1.AntNoteResponse.note:type_name -> google.protobuf.StringValue
	89,  // 70: operator.v1.AntLastResponse.last:type_name -> google.protobuf.Timestamp
	47,  // 71: operator.v1.SubscribeAntsResponse.ant:type_name -> operator.v1.AntResponse
	48,  // 72: operator.v1.SubscribeAntsResponse.ants:type_name -> operator.v1.AntsResponse
	49,  // 73: operator.v1.SubscribeAntsResponse.color:type_name -> operator.v1.AntColorResponse
	50,  // 74: operator.v1.SubscribeAntsResponse.note:type_name -> operator.v1.AntNoteResponse
	51,  // 75: operator.v1.SubscribeAntsResponse.last:type_name -> operator.v1.AntLastResponse
	52,  // 76: operator.v1.SubscribeAntsResponse.sleep:type_name -> operator.v1.AntSleepResponse
	0,   // 77: operator.v1.SubscribeOperatorsRequest.cookie:type_name -> operator.v1.SessionCookie
	87,  // 78: operator.v1.OperatorResponse.color:type_name -> google.protobuf.UInt32Value
	89,  // 79: operator.v1.OperatorResponse.last:type_name -> google.protobuf.Timestamp
	55,  // 80: operator.v1.OperatorsResponse.operators:type_name -> operator.v1.OperatorResponse
	89,  // 81: operator.v1.OperatorLastResponse.last:type_name -> google.protobuf.Timestamp
	87,  // 82: operator.v1.OperatorColorResponse.color:type_name -> google.protobuf.UInt32Value
	55,  // 83: operator.v1.SubscribeOperatorsResponse.operator:type_name -> operator.v1.OperatorResponse
	57,  // 84: operator.v1.SubscribeOperatorsResponse.last:type_name -> operator.v1.OperatorLastResponse
	58,  // 85: operator.v1.SubscribeOperatorsResponse.color:type_name -> operator.v1.OperatorColorResponse
	56,  // 86: operator.v1.SubscribeOperatorsResponse.operators:type_name -> operator.v1.OperatorsResponse
	0,   // 87: operator.v1.SubscribeChatRequest.cookie:type_name -> operator.v1.SessionCookie
	89,  // 88: operator.v1.ChatResponse.created_at:type_name -> google.protobuf.Timestamp
	88,  // 89: operator.v1.ChatResponse.from:type_name -> google.protobuf.StringValue
	61,  // 90: operator.v1.ChatMessagesResponse.messages:type_name -> operator.v1.ChatResponse
	61,  // 91: operator.v1.SubscribeChatResponse.message:type_name -> operator.v1.ChatResponse
	62,  // 92: operator.v1.SubscribeChatResponse.messages:type_name -> operator.v1.ChatMessagesResponse
	0,   // 93: operator.v1.SubscribeCredentialsRequest.cookie:type_name -> operator.v1.SessionCookie
	88,  // 94: operator.v1.CredentialResponse.username:type_name -> google.protobuf.StringValue
	88,  // 95: operator.v1.CredentialResponse.password:type_name -> google.protobuf.StringValue
	88,  // 96: operator.v1.CredentialResponse.realm:type_name -> google.protobuf.StringValue
	88,  // 97: operator.v1.CredentialResponse.host:type_name -> google.protobuf.StringValue
	89,  // 98: operator.v1.CredentialResponse.created_at:type_name -> google.protobuf.Timestamp
	88,  // 99: operator.v1.CredentialResponse.note:type_name -> google.protobuf.StringValue
	87,  // 100: operator.v1.CredentialResponse.color:type_name -> google.protobuf.UInt32Value
	65,  // 101: operator.v1.CredentialsResponse.credentials:type_name -> operator.v1.CredentialResponse
	87,  // 102: operator.v1.CredentialColorResponse.color:type_name -> google.protobuf.UInt32Value
	88,  // 103: operator.v1.CredentialNoteResponse.note:type_name -> google.protobuf.StringValue
	65,  // 104: operator.v1.SubscribeCredentialsResponse.credential:type_name -> operator.v1.CredentialResponse
	66,  // 105: operator.v1.SubscribeCredentialsResponse.credentials:type_name -> operator.v1.CredentialsResponse
	67,  // 106: operator.v1.SubscribeCredentialsResponse.color:type_name -> operator.v1.CredentialColorResponse
	68,  // 107: operator.v1.SubscribeCredentialsResponse.note:type_name -> operator.v1.CredentialNoteResponse
	0,   // 108: operator.v1.NewCommandRequest.cookie:type_name -> operator.v1.SessionCookie
	71,  // 109: operator.v1.NewCommandRequest.command:type_name -> operator.v1.CreateCommandRequest
	72,  // 110: operator.v1.NewCommandRequest.message:type_name -> operator.v1.CreateMessageRequest
	73,  // 111: operator.v1.NewCommandRequest.task:type_name -> operator.v1.CreateTaskRequest
	93,  // 112: operator.v1.CreateTaskRequest.sleep:type_name -> common.v1.CapSleep
	94,  // 113: operator.v1.CreateTaskRequest.ls:type_name -> common.v1.CapLs
	95,  // 114: operator.v1.CreateTaskRequest.pwd:type_name -> common.v1.CapPwd
	96,  // 115: operator.v1.CreateTaskRequest.cd:type_name -> common.v1.CapCd
	97,  // 116: operator.v1.CreateTaskRequest.whoami:type_name -> common.v1.CapWhoami
	98,  // 117: operator.v1.CreateTaskRequest.ps:type_name -> common.v1.CapPs
	99,  // 118: operator.v1.CreateTaskRequest.cat:type_name -> common.v1.CapCat
	100, // 119: operator.v1.CreateTaskRequest.exec:type_name -> common.v1.CapExec
	101, // 120: operator.v1.CreateTaskRequest.cp:type_name -> common.v1.CapCp
	102, // 121: operator.v1.CreateTaskRequest.jobs:type_name -> common.v1.CapJobs
	103, // 122: operator.v1.CreateTaskRequest.jobkill:type_name -> common.v1.CapJobkill
	104, // 123: operator.v1.CreateTaskRequest.kill:type_name -> common.v1.CapKill
	105, // 124: operator.v1.CreateTaskRequest.mv:type_name -> common.v1.CapMv
	106, // 125: operator.v1.CreateTaskRequest.mkdir:type_name -> common.v1.CapMkdir
	107, // 126: operator.v1.CreateTaskRequest.rm:type_name -> common.v1.CapRm
	108, // 127: operator.v1.CreateTaskRequest.exec_assembly:type_name -> common.v1.CapExecAssembly
	109, // 128: operator.v1.CreateTaskRequest.shellcode_injection:type_name -> common.v1.CapShellcodeInjection
	110, // 129: operator.v1.CreateTaskRequest.download:type_name -> common.v1.CapDownload
	111, // 130: operator.v1.CreateTaskRequest.upload:type_name -> common.v1.CapUpload
	112, // 131: operator.v1.CreateTaskRequest.pause:type_name -> common.v1.CapPause
	113, // 132: operator.v1.CreateTaskRequest.destruct:type_name -> common.v1.CapDestruct
	114, // 133: operator.v1.CreateTaskRequest.exec_detach:type_name -> common.v1.CapExecDetach
	115, // 134: operator.v1.CreateTaskRequest.shell:type_name -> common.v1.CapShell
	116, // 135: operator.v1.CreateTaskRequest.ppid:type_name -> common.v1.CapPpid
	117, // 136: operator.v1.CreateTaskRequest.exit:type_name -> common.v1.CapExit
	0,   // 137: operator.v1.SubscribeTasksRequest.cookie:type_name -> operator.v1.SessionCookie
	76,  // 138: operator.v1.SubscribeTasksRequest.hello:type_name -> operator.v1.SubscribeTasksHelloRequest
	77,  // 139: operator.v1.SubscribeTasksRequest.start:type_name -> operator.v1.StartPollAntRequest
	78,  // 140: operator.v1.SubscribeTasksRequest.stop:type_name -> operator.v1.StopPollAntRequest
	89,  // 141: operator.v1.CommandResponse.created:type_name -> google.protobuf.Timestamp
	89,  // 142: operator.v1.MessageResponse.created:type_name -> google.protobuf.Timestamp
	118, // 143: operator.v1.TaskResponse.output:type_name -> google.protobuf.BytesValue
	89,  // 144: operator.v1.TaskResponse.created:type_name -> google.protobuf.Timestamp
	118, // 145: operator.v1.TaskDoneResponse.output:type_name -> google.protobuf.BytesValue
	79,  // 146: operator.v1.SubscribeTasksResponse.command:type_name -> operator.v1.CommandResponse
	80,  // 147: operator.v1.SubscribeTasksResponse.message:type_name -> operator.v1.MessageResponse
	81,  // 148: operator.v1.SubscribeTasksResponse.task:type_name -> operator.v1.TaskResponse
	82,  // 149: operator.v1.SubscribeTasksResponse.task_status:type_name -> operator.v1.TaskStatusResponse
	83,  // 150: operator.v1.SubscribeTasksResponse.task_done:type_name -> operator.v1.TaskDoneResponse
	0,   // 151: operator.v1.GetTaskOutputRequest.cookie:type_name -> operator.v1.SessionCookie
	118, // 152: operator.v1.GetTaskOutputResponse.output:type_name -> google.protobuf.BytesValue
	35,  // 153: operator.v1.OperatorService.Hello:input_type -> operator.v1.HelloRequest
	38,  // 154: operator.v1.OperatorService.SubscribeListeners:input_type -> operator.v1.SubscribeListenersRequest
	46,  // 155: operator.v1.OperatorService.SubscribeAnts:input_type -> operator.v1.SubscribeAntsRequest
	54,  // 156: operator.v1.OperatorService.SubscribeOperators:input_type -> operator.v1.SubscribeOperatorsRequest
	60,  // 157: operator.v1.OperatorService.SubscribeChat:input_type -> operator.v1.SubscribeChatRequest
	64,  // 158: operator.v1.OperatorService.SubscribeCredentials:input_type -> operator.v1.SubscribeCredentialsRequest
	75,  // 159: operator.v1.OperatorService.SubscribeTasks:input_type -> operator.v1.SubscribeTasksRequest
	33,  // 160: operator.v1.OperatorService.SetListenerColor:input_type -> operator.v1.SetListenerColorRequest
	31,  // 161: operator.v1.OperatorService.SetListenersColor:input_type -> operator.v1.SetListenersColorRequest
	19,  // 162: operator.v1.OperatorService.SetListenerNote:input_type -> operator.v1.SetListenerNoteRequest
	29,  // 163: operator.v1.OperatorService.SetListenersNote:input_type -> operator.v1.SetListenersNoteRequest
	27,  // 164: operator.v1.OperatorService.SetAntColor:input_type -> operator.v1.SetAntColorRequest
	25,  // 165: operator.v1.OperatorService.SetAntsColor:input_type -> operator.v1.SetAntsColorRequest
	23,  // 166: operator.v1.OperatorService.SetAntNote:input_type -> operator.v1.SetAntNoteRequest
	21,  // 167: operator.v1.OperatorService.SetAntsNote:input_type -> operator.v1.SetAntsNoteRequest
	17,  // 168: operator.v1.OperatorService.SetOperatorColor:input_type -> operator.v1.SetOperatorColorRequest
	15,  // 169: operator.v1.OperatorService.SetOperatorsColor:input_type -> operator.v1.SetOperatorsColorRequest
	13,  // 170: operator.v1.OperatorService.NewChatMessage:input_type -> operator.v1.NewChatMessageRequest
	11,  // 171: operator.v1.OperatorService.NewCredential:input_type -> operator.v1.NewCredentialRequest
	9,   // 172: operator.v1.OperatorService.SetCredentialColor:input_type -> operator.v1.SetCredentialColorRequest
	7,   // 173: operator.v1.OperatorService.SetCredentialsColor:input_type -> operator.v1.SetCredentialsColorRequest
	5,   // 174: operator.v1.OperatorService.SetCredentialNote:input_type -> operator.v1.SetCredentialNoteRequest
	3,   // 175: operator.v1.OperatorService.SetCredentialsNote:input_type -> operator.v1.SetCredentialsNoteRequest
	70,  // 176: operator.v1.OperatorService.NewCommand:input_type -> operator.v1.NewCommandRequest
	1,   // 177: operator.v1.OperatorService.CancelTasks:input_type -> operator.v1.CancelTasksRequest
	85,  // 178: operator.v1.OperatorService.GetTaskOutput:input_type -> operator.v1.GetTaskOutputRequest
	37,  // 179: operator.v1.OperatorService.Hello:output_type -> operator.v1.HelloResponse
	45,  // 180: operator.v1.OperatorService.SubscribeListeners:output_type -> operator.v1.SubscribeListenersResponse
	53,  // 181: operator.v1.OperatorService.SubscribeAnts:output_type -> operator.v1.SubscribeAntsResponse
	59,  // 182: operator.v1.OperatorService.SubscribeOperators:output_type -> operator.v1.SubscribeOperatorsResponse
	63,  // 183: operator.v1.OperatorService.SubscribeChat:output_type -> operator.v1.SubscribeChatResponse
	69,  // 184: operator.v1.OperatorService.SubscribeCredentials:output_type -> operator.v1.SubscribeCredentialsResponse
	84,  // 185: operator.v1.OperatorService.SubscribeTasks:output_type -> operator.v1.SubscribeTasksResponse
	34,  // 186: operator.v1.OperatorService.SetListenerColor:output_type -> operator.v1.SetListenerColorResponse
	32,  // 187: operator.v1.OperatorService.SetListenersColor:output_type -> operator.v1.SetListenersColorResponse
	20,  // 188: operator.v1.OperatorService.SetListenerNote:output_type -> operator.v1.SetListenerNoteResponse
	30,  // 189: operator.v1.OperatorService.SetListenersNote:output_type -> operator.v1.SetListenersNoteResponse
	28,  // 190: operator.v1.OperatorService.SetAntColor:output_type -> operator.v1.SetAntColorResponse
	26,  // 191: operator.v1.OperatorService.SetAntsColor:output_type -> operator.v1.SetAntsColorResponse
	24,  // 192: operator.v1.OperatorService.SetAntNote:output_type -> operator.v1.SetAntNoteResponse
	22,  // 193: operator.v1.OperatorService.SetAntsNote:output_type -> operator.v1.SetAntsNoteResponse
	18,  // 194: operator.v1.OperatorService.SetOperatorColor:output_type -> operator.v1.SetOperatorColorResponse
	16,  // 195: operator.v1.OperatorService.SetOperatorsColor:output_type -> operator.v1.SetOperatorsColorResponse
	14,  // 196: operator.v1.OperatorService.NewChatMessage:output_type -> operator.v1.NewChatMessageResponse
	12,  // 197: operator.v1.OperatorService.NewCredential:output_type -> operator.v1.NewCredentialResponse
	10,  // 198: operator.v1.OperatorService.SetCredentialColor:output_type -> operator.v1.SetCredentialColorResponse
	8,   // 199: operator.v1.OperatorService.SetCredentialsColor:output_type -> operator.v1.SetCredentialsColorResponse
	6,   // 200: operator.v1.OperatorService.SetCredentialNote:output_type -> operator.v1.SetCredentialNoteResponse
	4,   // 201: operator.v1.OperatorService.SetCredentialsNote:output_type -> operator.v1.SetCredentialsNoteResponse
	74,  // 202: operator.v1.OperatorService.NewCommand:output_type -> operator.v1.NewCommandResponse
	2,   // 203: operator.v1.OperatorService.CancelTasks:output_type -> operator.v1.CancelTasksResponse
	86,  // 204: operator.v1.OperatorService.GetTaskOutput:output_type -> operator.v1.GetTaskOutputResponse
	179, // [179:205] is the sub-list for method output_type
	153, // [153:179] is the sub-list for method input_type
	153, // [153:153] is the sub-list for extension type_name
	153, // [153:153] is the sub-list for extension extendee
	0,   // [0:153] is the sub-list for field type_name
}

func init() { file_operator_v1_operator_proto_init() }
func file_operator_v1_operator_proto_init() {
	if File_operator_v1_operator_proto != nil {
		return
	}
	file_operator_v1_operator_proto_msgTypes[37].OneofWrappers = []any{
		(*HelloResponse_Handshake)(nil),
		(*HelloResponse_Empty)(nil),
	}
	file_operator_v1_operator_proto_msgTypes[45].OneofWrappers = []any{
		(*SubscribeListenersResponse_Listener)(nil),
		(*SubscribeListenersResponse_Listeners)(nil),
		(*SubscribeListenersResponse_Color)(nil),
		(*SubscribeListenersResponse_Note)(nil),
		(*SubscribeListenersResponse_Info)(nil),
		(*SubscribeListenersResponse_Last)(nil),
	}
	file_operator_v1_operator_proto_msgTypes[53].OneofWrappers = []any{
		(*SubscribeAntsResponse_Ant)(nil),
		(*SubscribeAntsResponse_Ants)(nil),
		(*SubscribeAntsResponse_Color)(nil),
		(*SubscribeAntsResponse_Note)(nil),
		(*SubscribeAntsResponse_Last)(nil),
		(*SubscribeAntsResponse_Sleep)(nil),
	}
	file_operator_v1_operator_proto_msgTypes[59].OneofWrappers = []any{
		(*SubscribeOperatorsResponse_Operator)(nil),
		(*SubscribeOperatorsResponse_Last)(nil),
		(*SubscribeOperatorsResponse_Color)(nil),
		(*SubscribeOperatorsResponse_Operators)(nil),
	}
	file_operator_v1_operator_proto_msgTypes[63].OneofWrappers = []any{
		(*SubscribeChatResponse_Message)(nil),
		(*SubscribeChatResponse_Messages)(nil),
	}
	file_operator_v1_operator_proto_msgTypes[69].OneofWrappers = []any{
		(*SubscribeCredentialsResponse_Credential)(nil),
		(*SubscribeCredentialsResponse_Credentials)(nil),
		(*SubscribeCredentialsResponse_Color)(nil),
		(*SubscribeCredentialsResponse_Note)(nil),
	}
	file_operator_v1_operator_proto_msgTypes[70].OneofWrappers = []any{
		(*NewCommandRequest_Command)(nil),
		(*NewCommandRequest_Message)(nil),
		(*NewCommandRequest_Task)(nil),
	}
	file_operator_v1_operator_proto_msgTypes[73].OneofWrappers = []any{
		(*CreateTaskRequest_Sleep)(nil),
		(*CreateTaskRequest_Ls)(nil),
		(*CreateTaskRequest_Pwd)(nil),
		(*CreateTaskRequest_Cd)(nil),
		(*CreateTaskRequest_Whoami)(nil),
		(*CreateTaskRequest_Ps)(nil),
		(*CreateTaskRequest_Cat)(nil),
		(*CreateTaskRequest_Exec)(nil),
		(*CreateTaskRequest_Cp)(nil),
		(*CreateTaskRequest_Jobs)(nil),
		(*CreateTaskRequest_Jobkill)(nil),
		(*CreateTaskRequest_Kill)(nil),
		(*CreateTaskRequest_Mv)(nil),
		(*CreateTaskRequest_Mkdir)(nil),
		(*CreateTaskRequest_Rm)(nil),
		(*CreateTaskRequest_ExecAssembly)(nil),
		(*CreateTaskRequest_ShellcodeInjection)(nil),
		(*CreateTaskRequest_Download)(nil),
		(*CreateTaskRequest_Upload)(nil),
		(*CreateTaskRequest_Pause)(nil),
		(*CreateTaskRequest_Destruct)(nil),
		(*CreateTaskRequest_ExecDetach)(nil),
		(*CreateTaskRequest_Shell)(nil),
		(*CreateTaskRequest_Ppid)(nil),
		(*CreateTaskRequest_Exit)(nil),
	}
	file_operator_v1_operator_proto_msgTypes[75].OneofWrappers = []any{
		(*SubscribeTasksRequest_Hello)(nil),
		(*SubscribeTasksRequest_Start)(nil),
		(*SubscribeTasksRequest_Stop)(nil),
	}
	file_operator_v1_operator_proto_msgTypes[84].OneofWrappers = []any{
		(*SubscribeTasksResponse_Command)(nil),
		(*SubscribeTasksResponse_Message)(nil),
		(*SubscribeTasksResponse_Task)(nil),
		(*SubscribeTasksResponse_TaskStatus)(nil),
		(*SubscribeTasksResponse_TaskDone)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_operator_v1_operator_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   87,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_operator_v1_operator_proto_goTypes,
		DependencyIndexes: file_operator_v1_operator_proto_depIdxs,
		MessageInfos:      file_operator_v1_operator_proto_msgTypes,
	}.Build()
	File_operator_v1_operator_proto = out.File
	file_operator_v1_operator_proto_rawDesc = nil
	file_operator_v1_operator_proto_goTypes = nil
	file_operator_v1_operator_proto_depIdxs = nil
}
